<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: memsql | Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/blog/categories/memsql/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2014-06-03T22:55:30+02:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Taking MemSQL for a spin]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin/"/>
    <updated>2012-06-20T10:18:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/06/20/taking-memsql-for-a-spin/"><img class="left" src="/images/posts/memsql.png" width="200" height="200" title="MemSQL" ></a> This week I read an article on <a href="http://news.ycombinator.com/item?id=4126007">HackerNews</a> about Ex-facebook employs releasing a new database server called MemSQL.</p>

<p>After viewing there <a href="http://developers.memsql.com/">product overview video</a> I got excited and wanted to take this product for a spin.</p>

<!-- more -->


<h2>What to test?</h2>

<p>First I needed a project for testing the performance on. At <a href="http://www.auxilium.nl">my work</a> we developed a Rails application that needs to validate a permit request with rules, questions, filters, answers depending on a region etc. etc. This process of validating a whole permit request takes some time because it has to perform <strong>6850 queries</strong>.</p>

<h2>Performance PostgreSQL</h2>

<p>At this moment the application runs on a PostgreSQL database so lets see what the performance is at this point:</p>

<p>```
run       user     system      total        real</p>

<h1>01  10.690000   0.540000  11.230000 ( 14.828312)</h1>

<h1>02   9.450000   0.490000   9.940000 ( 13.895988)</h1>

<h1>03   9.550000   0.470000  10.020000 ( 14.215028)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='14.312ms for 6850 queries'>
The average result is that it takes 14.312ms for 6850 queries on PostgreSQL.
</span></p>

<h2>Configuring the Rails app to use MemSQL</h2>

<p>After installing MemSQL and starting it running on port 3307, I created a new database added the existing data and changed some connection strings for the Rails app.</p>

<h3>mysql2 gem</h3>

<p>Because MemSQL is built on top of MySQL you can use all the MySQL client tools to perform operations on MemSQL.</p>

<p>The MemSQL documentation recommended using the memsql2 gem but to do this I had to install MySQL first on my machine.</p>

<h3>Failed to connect?</h3>

<p>After installing MySQL and configured the Rails application I got some strange error when starting the application.</p>

<p><code>
Failed to connect to database:
  Sequel::AdapterNotFound -&gt; LoadError: dlopen(.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle, 9): Library not loaded: /usr/local/mysql/lib/libmysqlclient.16.dylib
  Referenced from: /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
  Reason: image not found - /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
</code></p>

<p>After some googling I found out that on OSX you might need to symlink the dylib manually. <strong>NOTE</strong> Because I've installed a newer version of MySQL I have a <code>libmysqlclient.18.dylib</code> instead of the required <code>libmysqlclient.16.dylib</code>. Symlinking this file from libmysqlclient.18.dylib to libmysqlclient.16.dylib seemed to work for me.</p>

<p><code>
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/mysql/lib/libmysqlclient.16.dylib
</code></p>

<h3>Explain not supported for joins</h3>

<p>At this point I am able to connect to the database and perform the benchmark, but I got the next error:</p>

<p><code>
ActiveRecord::StatementInvalid: Mysql2::Error: Feature 'EXPLAIN for join queries' is not supported by MemSQL.
</code></p>

<p>Apparently I've EXPLAIN queries on in my config and this isn't supported for JOIN queries as MemSQL tells us.</p>

<p>To resolve this you just have to modify/add this line in your <code>config/environment/development.rb</code></p>

<p><code>
config.active_record.auto_explain_threshold_in_seconds = nil
</code></p>

<h2>MemSQL's first spin!</h2>

<p><span class='pullquote-right' data-pullquote='first run took 3 min and 05 seconds!'>
So after resolving all these issues I was able to run the benchmark, but the first run took 3 min and 05 seconds! First I thought that this can not be right, but I forgot the fact that it generate's c code from the queries.
</span></p>

<p>On the MemSQL server I got the following output:</p>

<p><code>``sql
2908919519 2012-06-20 09:56:16 INFO: Query appdb.'SELECT </code>permit_requests<code>.* FROM</code>permit_requests<code> WHERE</code>permit_requests<code>.</code>id<code>= @ LIMIT @' compiled in 7306 milliseconds
2908983637 2012-06-20 09:56:16 WARNING: WARN DISABLED LOCKDOWN: BEGIN TRANSACTION
2916240227 2012-06-20 09:56:23 INFO: Query appdb.'SELECT </code>categories<code>.* FROM</code>categories<code> WHERE</code>categories<code>.</code>id<code>= @ ORDER BY name LIMIT @' compiled in 7203 milliseconds
2924143142 2012-06-20 09:56:31 INFO: Query appdb.'SELECT</code>questions<code>.* FROM</code>questions<code> WHERE</code>questions<code>.</code>category_id` = @ ORDER BY position' compiled in 7722 milliseconds</p>

<p>... etc ...
```</p>

<p>As you can see, generating the compiled version for every query took about 7 seconds.</p>

<h2>Performance MemSQL</h2>

<p>So below again the same table with results. The first line is the time with generating all the compiled queries:</p>

<p>```
run       user     system      total        real</p>

<h1>01   5.260000   0.360000   5.620000 (183.511099)</h1>

<h1>02   3.830000   0.260000   4.090000 (  6.657682)</h1>

<h1>03   3.790000   0.260000   4.050000 (  6.613542)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='6.635ms for 6850 queries'>
The performance boost is quite huge! The average result is 6.635ms for 6850 queries if we are skipping the first result. This means it's like 7.677ms faster!
</span></p>

<h3>Cold boot of MemSQL</h3>

<p>I've also tried the performance when I restart the database server. I just wanted to know if it keeps the data in memory and would take longer to run after a restart.</p>

<p>The result:</p>

<p>```
run       user     system      total        real</p>

<h1>01   5.110000   0.330000   5.440000 (  8.030930)</h1>

<h1>02   3.770000   0.260000   4.030000 (  6.580312)</h1>

<h1>03   3.780000   0.250000   4.030000 (  6.524884)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='7.044ms for 6850 queries'>
The first time it took just a bit longer, but with an average of 7.044ms for 6850 queries this is still faster than running it on PostgreSQL!
</span></p>

<h2>Pros and Cons</h2>

<p>Here's a list with some pros and cons I noticed while experimenting with MemSQL:</p>

<h3>Pros</h3>

<ul>
<li>Blazing fast!</li>
<li>You can use all the MySQL client tools out there. Also because it uses MySQL, troubleshooting might not be an issue because it isn't a new product.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Huge cache folder! After restoring the database (15Mb) MemSQL creates a folder in the <code>plancache</code> folder which is <strong>5.5GB</strong>. So performance comes with a price I think.</li>
<li>Unable to create users. When creating the database, I tried to add a new user but this isn't supported. Maybe this is because I'm using the Developer Edition.</li>
</ul>

]]></content>
  </entry>
  
</feed>
