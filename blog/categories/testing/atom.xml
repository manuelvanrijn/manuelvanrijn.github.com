<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2012-07-30T10:14:22+02:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrate Travis CI into Grunt]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt/"/>
    <updated>2012-06-22T15:04:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/06/22/integrate-travis-ci-into-grunt/"><img class="right" src="/images/posts/travis-grunt.jpg" width="200" height="200" title="Code Fail" ></a> Today I've done some research how to get my latest jQuery plugin (<a href="http://manuel.manuelles.nl/jquery-numeric_input/">jquery-numeric_input</a>) to be tested automatically with the help of <a href="http://travis-ci.org/">Travis CI</a>. Travis CI is a hosted continuous integration service for open source projects.</p>

<p>Because I've just finished the latest functionality of the plugin I wanted to add the project to Travis CI, just like I do with all my other projects (the ones with unit tests).</p>

<!-- more -->


<h2>Grunt</h2>

<p>For the development of the plugin I used <a href="http://gruntjs.com/">Grunt</a> which is a task-based command line build tool for JavaScript projects. Starting a new project is as easy as running <code>grunt init:jquery</code> and you have a entire generated jQuery plugin project.</p>

<p>By default this command configures a jQuery plugin, QUnit test suite, sample plugin, sample tests and some grunt tasks you can use. Running the <code>grunt</code> command in your project folder will execute the default task meaning:</p>

<ol>
<li>lint - Analysis your code with <a href="https://github.com/douglascrockford/JSLint/">JSLint</a></li>
<li>qunit - Runs your QUnit tests using <a href="http://phantomjs.org/">PhantomJS</a> (so it supports the exit code for success or failure)</li>
<li>concat - Concatenate your project files</li>
<li>min - Minify your project files using <a href="https://github.com/mishoo/UglifyJS/">UglifyJS</a></li>
</ol>


<p>Really easy to get started coding instead of setting up your environment :)</p>

<h2>Integration with Travis CI</h2>

<p>Ok so at this point I want to add my project to Travis CI so that it tests my suite when pushing new branches/commits to Github. To do this we have to make a few changes.</p>

<h3>TL;DR</h3>

<p>Here's the <a href="https://github.com/manuelvanrijn/jquery-numeric_input/commit/fd770092e569fbc407777de3f099d6d4d5d30bdf">travis ci integration commit</a> from my plugin with all the steps described below.</p>

<h3>Registering the travis task</h3>

<p>I'd like to keep the Grunt tasks organized so I register a new task called <code>travis</code> below the <code>default</code> task.</p>

<p>```javascript grunt.js
// Default task.
grunt.registerTask('default', 'lint qunit concat min');</p>

<p>// Travis CI task.
grunt.registerTask('travis', 'lint qunit');
```</p>

<p>As you can see I only added <code>lint</code> and <code>qunit</code> because we don't have to concatenate or minify a new build of our plugin. At this point you are able to run <code>grunt travis</code> from the command line.</p>

<h3>Adding the dependency</h3>

<p>Now we have to add Grunt as a dependency to our <code>package.json</code> file so that npm running on Travis CI knows it has to install Grunt. Mine dependencies block looks like this:</p>

<p><code>json package.json
"dependencies": {
  "grunt": "~0.3.9",
  "jquery": "~1.5"
}
</code></p>

<h3>Adding the npm task</h3>

<p>Travis CI runs <code>npm test</code> after it fetched your project and installed the dependencies, so we need to add this task to the <code>package.json</code> file.</p>

<p><code>json package.json
"scripts": {
  "test": "grunt travis --verbose"
}
</code></p>

<p>I've added the <code>--verbose</code> option, so we'll see more output of what is going on.</p>

<h3>Adding the .travis.yml</h3>

<p>Every Travis CI project needs to have a <code>.travis.yml</code> file in the root of the project folder, so it know what platform and version it should use to build/test your project. Here's the one I used:</p>

<p><code>yaml .travis.yaml
language: node_js
node_js:
  - 0.6
before_script:
  - "export DISPLAY=:99.0"
  - "sh -e /etc/init.d/xvfb start"
</code></p>

<p>The commands within <code>before_script</code> takes care of running the PhantomJS on the headless server on Travis CI.</p>

<h2>Ready to go!</h2>

<p>Alright after these changes your project is ready to be continuously builded with Travis CI. But don't forget to setup the Service Hook on Github!</p>
]]></content>
  </entry>
  
</feed>
