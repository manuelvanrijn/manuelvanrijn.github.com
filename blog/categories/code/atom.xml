<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2013-09-13T14:22:25+02:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yeoman meets Travis CI]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/09/17/yeoman-meets-travis-ci/"/>
    <updated>2012-09-17T14:45:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/09/17/yeoman-meets-travis-ci</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/06/22/integrate-travis-ci-into-grunt/"><img class="right" src="/images/posts/yeoman-logo.png" width="200" height="200" title="Yeoman" ></a> Today I'd like to show how you can integrate Travis CI within your Yeoman project.</p>

<p><a href="http://travis-ci.org/">Travis CI</a> is a hosted continuous integration service for open source projects and <a href="http://yeoman.io">Yeoman</a> is a robust and opinionated set of tools, libraries, and a workflow that can help developers quickly build beautiful, compelling web apps.</p>

<!-- more -->


<h2>Adding Travis CI support</h2>

<p>When Yeoman was released I've tried to add Travis CI support to a test project. After setting everything up there seemed to be a problem with the update check being fired when running tests. This was annoying because Travis CI was waiting for input from the user.</p>

<p>So I've fixed the issue and created a <a href="https://github.com/yeoman/yeoman/pull/369">pull request</a> that was merged very quick thanks to <a href="http://www.addyosmani.com">Addy Osmani</a>.</p>

<p>Anyway today I saw that there was a new version released which includes my fix and I like to share how you can make your Yeoman project be tested within Travis CI.</p>

<h3>TL;DR;</h3>

<p>See <a href="https://github.com/manuelvanrijn/yeoman-travis-ci/commit/32203d84ca2dbba2faa671e55afede8a1e6666df">this commit</a> with all the changes you have to make to your existing Yeoman project in order to get Travis CI integration.</p>

<p>Or just browse my test project here: <a href="https://github.com/manuelvanrijn/yeoman-travis-ci">yeoman-travis-ci</a></p>

<h3>package.json</h3>

<h4>Adding the yeoman dependency</h4>

<p>First we have to add the yeoman package as a dependency to our <code>package.json</code> file because we can't install yeoman globally on Travis CI.</p>

<p><code>yml
"devDependencies": {
  "yeoman": "~0.9.1"
}
</code></p>

<p>After adding the dependency and running <code>npm install</code> you'll see that yeoman is installed in the <code>node_modules</code> folder of your project.</p>

<h4>Setup npm test script</h4>

<p>Travis CI runs the <code>npm test</code> command after fetching the project and installing the dependencies. To make npm test run the Yeoman test task, we need to add the following line into our <code>package.json</code> file.</p>

<p><code>yml
"scripts": {
  "test": "node_modules/.bin/yeoman test --verbose"
}
</code></p>

<p>I've added the <code>--verbose</code> argument because I'd like to see detailed information when my tests fail, but this is an optional argument.</p>

<p>At this point you should be able to run <code>npm test</code> and see Yeoman running your tests.</p>

<h3>Add the .travis.yml file</h3>

<p>Finally we have to add a <code>.travis.yml</code> file to let Travis CI know what language our project is and on which version(s) of NodeJS it should use to test our project against (note: Yeoman requires >= 0.8).</p>

<p><code>yml
language: node_js
node_js:
  - 0.8
  - 0.9
</code></p>

<h2>Hook &amp; Push!</h2>

<p>The final step is to add the Travis CI hook to you project in GitHub and push your project.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Travis CI into Grunt]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt/"/>
    <updated>2012-06-22T15:04:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/06/22/integrate-travis-ci-into-grunt/"><img class="right" src="/images/posts/travis-grunt.jpg" width="200" height="200" title="Code Fail" ></a> Today I've done some research how to get my latest jQuery plugin (<a href="http://manuel.manuelles.nl/jquery-numeric_input/">jquery-numeric_input</a>) to be tested automatically with the help of <a href="http://travis-ci.org/">Travis CI</a>. Travis CI is a hosted continuous integration service for open source projects.</p>

<p>Because I've just finished the latest functionality of the plugin I wanted to add the project to Travis CI, just like I do with all my other projects (the ones with unit tests).</p>

<!-- more -->


<h2>Grunt</h2>

<p>For the development of the plugin I used <a href="http://gruntjs.com/">Grunt</a> which is a task-based command line build tool for JavaScript projects. Starting a new project is as easy as running <code>grunt init:jquery</code> and you have a entire generated jQuery plugin project.</p>

<p>By default this command configures a jQuery plugin, QUnit test suite, sample plugin, sample tests and some grunt tasks you can use. Running the <code>grunt</code> command in your project folder will execute the default task meaning:</p>

<ol>
<li>lint - Analysis your code with <a href="https://github.com/douglascrockford/JSLint/">JSLint</a></li>
<li>qunit - Runs your QUnit tests using <a href="http://phantomjs.org/">PhantomJS</a> (so it supports the exit code for success or failure)</li>
<li>concat - Concatenate your project files</li>
<li>min - Minify your project files using <a href="https://github.com/mishoo/UglifyJS/">UglifyJS</a></li>
</ol>


<p>Really easy to get started coding instead of setting up your environment :)</p>

<h2>Integration with Travis CI</h2>

<p>Ok so at this point I want to add my project to Travis CI so that it tests my suite when pushing new branches/commits to Github. To do this we have to make a few changes.</p>

<h3>TL;DR</h3>

<p>Here's the <a href="https://github.com/manuelvanrijn/jquery-numeric_input/commit/188e1fa53ca565b2901f0ac4b6de102b6349577b">travis ci integration commit</a> from my plugin with all the steps described below.</p>

<h3>Registering the travis task</h3>

<p>I'd like to keep the Grunt tasks organized so I register a new task called <code>travis</code> below the <code>default</code> task.</p>

<p>```javascript grunt.js
// Default task.
grunt.registerTask('default', 'lint qunit concat min');</p>

<p>// Travis CI task.
grunt.registerTask('travis', 'lint qunit');
```</p>

<p>As you can see I only added <code>lint</code> and <code>qunit</code> because we don't have to concatenate or minify a new build of our plugin. At this point you are able to run <code>grunt travis</code> from the command line.</p>

<h3>Adding the dependency</h3>

<p>Now we have to add Grunt as a dependency to our <code>package.json</code> file so that npm running on Travis CI knows it has to install Grunt. Mine dependencies block looks like this:</p>

<p><code>json package.json
"dependencies": {
  "jQuery": "~1.7.3"
},
"devDependencies": {
  "grunt": "~0.3.14"
},
</code></p>

<h3>Adding the npm task</h3>

<p>Travis CI runs <code>npm test</code> after it fetched your project and installed the dependencies, so we need to add this task to the <code>package.json</code> file.</p>

<p><code>json package.json
"scripts": {
  "test": "grunt travis --verbose"
}
</code></p>

<p>I've added the <code>--verbose</code> option, so we'll see more output of what is going on.</p>

<h3>Adding the .travis.yml</h3>

<p>Every Travis CI project needs to have a <code>.travis.yml</code> file in the root of the project folder, so it know what platform and version it should use to build/test your project. Here's the one I used:</p>

<p><code>yaml .travis.yml
language: node_js
node_js:
  - 0.6
  - 0.8
  - 0.9
</code></p>

<h2>Ready to go!</h2>

<p>Alright after these changes your project is ready to be continuously builded with Travis CI. But don't forget to setup the Service Hook on Github!</p>

<h2>Update</h2>

<p>Thanks to <strong>Ryan Seddon</strong> and <strong>Ariya Hidayat</strong> for noticing me that the <code>before_script</code> section for running PhantomJS on the headless server on Travis CI isn't needed. See <a href="http://about.travis-ci.org/docs/user/gui-and-headless-browsers/">this link</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking MemSQL for a spin]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin/"/>
    <updated>2012-06-20T10:18:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/06/20/taking-memsql-for-a-spin/"><img class="left" src="/images/posts/memsql.png" width="200" height="200" title="MemSQL" ></a> This week I read an article on <a href="http://news.ycombinator.com/item?id=4126007">HackerNews</a> about Ex-facebook employs releasing a new database server called MemSQL.</p>

<p>After viewing there <a href="http://developers.memsql.com/">product overview video</a> I got excited and wanted to take this product for a spin.</p>

<!-- more -->


<h2>What to test?</h2>

<p>First I needed a project for testing the performance on. At <a href="http://www.auxilium.nl">my work</a> we developed a Rails application that needs to validate a permit request with rules, questions, filters, answers depending on a region etc. etc. This process of validating a whole permit request takes some time because it has to perform <strong>6850 queries</strong>.</p>

<h2>Performance PostgreSQL</h2>

<p>At this moment the application runs on a PostgreSQL database so lets see what the performance is at this point:</p>

<p>```
run       user     system      total        real</p>

<h1>01  10.690000   0.540000  11.230000 ( 14.828312)</h1>

<h1>02   9.450000   0.490000   9.940000 ( 13.895988)</h1>

<h1>03   9.550000   0.470000  10.020000 ( 14.215028)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='14.312ms for 6850 queries'>
The average result is that it takes 14.312ms for 6850 queries on PostgreSQL.
</span></p>

<h2>Configuring the Rails app to use MemSQL</h2>

<p>After installing MemSQL and starting it running on port 3307, I created a new database added the existing data and changed some connection strings for the Rails app.</p>

<h3>mysql2 gem</h3>

<p>Because MemSQL is built on top of MySQL you can use all the MySQL client tools to perform operations on MemSQL.</p>

<p>The MemSQL documentation recommended using the memsql2 gem but to do this I had to install MySQL first on my machine.</p>

<h3>Failed to connect?</h3>

<p>After installing MySQL and configured the Rails application I got some strange error when starting the application.</p>

<p><code>
Failed to connect to database:
  Sequel::AdapterNotFound -&gt; LoadError: dlopen(.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle, 9): Library not loaded: /usr/local/mysql/lib/libmysqlclient.16.dylib
  Referenced from: /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
  Reason: image not found - /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
</code></p>

<p>After some googling I found out that on OSX you might need to symlink the dylib manually. <strong>NOTE</strong> Because I've installed a newer version of MySQL I have a <code>libmysqlclient.18.dylib</code> instead of the required <code>libmysqlclient.16.dylib</code>. Symlinking this file from libmysqlclient.18.dylib to libmysqlclient.16.dylib seemed to work for me.</p>

<p><code>
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/mysql/lib/libmysqlclient.16.dylib
</code></p>

<h3>Explain not supported for joins</h3>

<p>At this point I am able to connect to the database and perform the benchmark, but I got the next error:</p>

<p><code>
ActiveRecord::StatementInvalid: Mysql2::Error: Feature 'EXPLAIN for join queries' is not supported by MemSQL.
</code></p>

<p>Apparently I've EXPLAIN queries on in my config and this isn't supported for JOIN queries as MemSQL tells us.</p>

<p>To resolve this you just have to modify/add this line in your <code>config/environment/development.rb</code></p>

<p><code>
config.active_record.auto_explain_threshold_in_seconds = nil
</code></p>

<h2>MemSQL's first spin!</h2>

<p><span class='pullquote-right' data-pullquote='first run took 3 min and 05 seconds!'>
So after resolving all these issues I was able to run the benchmark, but the first run took 3 min and 05 seconds! First I thought that this can not be right, but I forgot the fact that it generate's c code from the queries.
</span></p>

<p>On the MemSQL server I got the following output:</p>

<p><code>``sql
2908919519 2012-06-20 09:56:16 INFO: Query appdb.'SELECT </code>permit_requests<code>.* FROM</code>permit_requests<code> WHERE</code>permit_requests<code>.</code>id<code>= @ LIMIT @' compiled in 7306 milliseconds
2908983637 2012-06-20 09:56:16 WARNING: WARN DISABLED LOCKDOWN: BEGIN TRANSACTION
2916240227 2012-06-20 09:56:23 INFO: Query appdb.'SELECT </code>categories<code>.* FROM</code>categories<code> WHERE</code>categories<code>.</code>id<code>= @ ORDER BY name LIMIT @' compiled in 7203 milliseconds
2924143142 2012-06-20 09:56:31 INFO: Query appdb.'SELECT</code>questions<code>.* FROM</code>questions<code> WHERE</code>questions<code>.</code>category_id` = @ ORDER BY position' compiled in 7722 milliseconds</p>

<p>... etc ...
```</p>

<p>As you can see, generating the compiled version for every query took about 7 seconds.</p>

<h2>Performance MemSQL</h2>

<p>So below again the same table with results. The first line is the time with generating all the compiled queries:</p>

<p>```
run       user     system      total        real</p>

<h1>01   5.260000   0.360000   5.620000 (183.511099)</h1>

<h1>02   3.830000   0.260000   4.090000 (  6.657682)</h1>

<h1>03   3.790000   0.260000   4.050000 (  6.613542)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='6.635ms for 6850 queries'>
The performance boost is quite huge! The average result is 6.635ms for 6850 queries if we are skipping the first result. This means it's like 7.677ms faster!
</span></p>

<h3>Cold boot of MemSQL</h3>

<p>I've also tried the performance when I restart the database server. I just wanted to know if it keeps the data in memory and would take longer to run after a restart.</p>

<p>The result:</p>

<p>```
run       user     system      total        real</p>

<h1>01   5.110000   0.330000   5.440000 (  8.030930)</h1>

<h1>02   3.770000   0.260000   4.030000 (  6.580312)</h1>

<h1>03   3.780000   0.250000   4.030000 (  6.524884)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='7.044ms for 6850 queries'>
The first time it took just a bit longer, but with an average of 7.044ms for 6850 queries this is still faster than running it on PostgreSQL!
</span></p>

<h2>Pros and Cons</h2>

<p>Here's a list with some pros and cons I noticed while experimenting with MemSQL:</p>

<h3>Pros</h3>

<ul>
<li>Blazing fast!</li>
<li>You can use all the MySQL client tools out there. Also because it uses MySQL, troubleshooting might not be an issue because it isn't a new product.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Huge cache folder! After restoring the database (15Mb) MemSQL creates a folder in the <code>plancache</code> folder which is <strong>5.5GB</strong>. So performance comes with a price I think.</li>
<li>Unable to create users. When creating the database, I tried to add a new user but this isn't supported. Maybe this is because I'm using the Developer Edition.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Android SKD for Eclipse]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/04/04/installing-android-skd-for-eclipse/"/>
    <updated>2012-04-04T09:53:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/04/04/installing-android-skd-for-eclipse</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/posts/android.jpg" width="140" height="140" title="Android!" > Today I was trying to install the Android SDK for Eclipse for a new project I'll work on. After downloading the necessary packages I got some strange error I couldn't resolve quickly, so I like to share the solution with you guys.</p>

<p>The error Eclipse returned was</p>

<p><code>
Cannot complete the install because one or more required items could not be found.
Software being installed: Android Development Tools **** (com.android.ide.eclipse.adt.feature.group ****)
Missing requirement: Android Development Tools **** (com.android.ide.eclipse.adt.feature.group ****)
requires 'org.eclipse.wst.sse.core 0.0.0' but it could not be found
</code></p>

<!-- more -->


<h2>What I did to produce the error</h2>

<p>I installed Eclipse and the Android SDK tested the Android SDK by creating an AVD.</p>

<p>After running Eclipse I tried to add the <code>https://dl-ssl.google.com/android/eclipse/</code> url to my Available Software Sites to install the Eclipse package. After selecting all the Developer Tools in the filtered list for this Software Site and hitting Next I received the error as I added above</p>

<h2>The solution</h2>

<p>After some googling I found a tip that I needed to add another Software Site to Eclipse.</p>

<p>After adding <code>http://download.eclipse.org/releases/indigo</code> and retrying to install the Android Developer Tools all went well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failed to build gem native extension]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/03/20/failed-to-build-gem-native-extension/"/>
    <updated>2012-03-20T13:14:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/03/20/failed-to-build-gem-native-extension</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/posts/failed-gem.jpg" width="140" height="140" title="Go fix!" >
Today I had to reinstall my Linux installation because my harddisk died a quick dead. While configuring all the software I use to develop I got some weird error after I'd installed <a href="https://github.com/sstephenson/rbenv">rbenv</a> and tried to execute <code>bundle install</code> on one of our projects.<br /><br /></p>

<!-- more -->


<h2>The error</h2>

<p>The following error was raised when I tried to install capybara-webkit</p>

<p>```
Installing capybara-webkit (0.10.1) with native extensions
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.</p>

<p>/home/manuel/.rbenv/versions/1.9.3-p125/bin/ruby extconf.rb
sh: qmake: not found</p>

<p>Gem files will remain installed in /home/manuel/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/capybara-webkit-0.10.1 for inspection.
Results logged to /home/manuel/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/capybara-webkit-0.10.1/./gem_make.out
An error occured while installing capybara-webkit (0.10.1), and Bundler cannot continue.
Make sure that <code>gem install capybara-webkit -v '0.10.1'</code> succeeds before bundling.
```</p>

<h2>The solution</h2>

<p>I first thought there were some problems with <code>make</code> or <code>cmake</code> because that's what the error says. <code>qmake: not found</code>, but that didn't seem to be te real problem.</p>

<p>After some googlefoo I found out that I was missing the <code>libqtwebkit-dev</code> package. So the problem in this case was easily resolved by running:</p>

<p><code>
sudo apt-get install libqtwebkit-dev
</code></p>
]]></content>
  </entry>
  
</feed>
