<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2012-01-12T22:03:19+01:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Disable Rails callback]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/01/12/disable-rails-before-slash-after-callback/"/>
    <updated>2012-01-12T21:30:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/01/12/disable-rails-before-slash-after-callback</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/posts/skip-step.png" width="240" height="240" title="Skip Step" ></p>

<p>Today I've had some difficulties with a Rails migration, that took ages to complete. After some debugging I figured out the that the issues was because of the <code>before_save</code> and <code>after_save</code> callbacks.</p>

<p>Of course we could remove the before and after save callbacks to speed up the process, but I don't like the idea of releasing a model that misses these behavior. I mean they're not there for no reason right?</p>

<p>After some googling I found a quick and easy way to disable the callbacks without modifying the model. Here's an simple example of a model class and a migration the disable the callbacks only within the migration.</p>

<h2>Code solution</h2>

<p>``` ruby app/models/some_model.rb
class SomeModel &lt; ActiveRecord::Base
  before_save :before_action
  after_save :after_action</p>

<p>  private</p>

<pre><code>def before_action
  # heavy calculation/queries
  puts "you shouldn't see this"
end

def after_action
  # another heavy calculation/queries
  puts "you shouldn't see this"
end
</code></pre>

<p>end
```</p>

<p>``` ruby db/migrations/20120112092136_update_some_model.rb
class UpdateSomeModel &lt; ActiveRecord::Migration
  def up</p>

<pre><code># disable the before_save
SomeModel.skip_callback(:save, :before, :before_action)
# disable the after_save
SomeModel.skip_callback(:save, :after, :after_action)

SomeModel.all.each do | obj |
  # .. modify obj ...

  obj.save
  # you shouldn't see the puts defined in the SomeModel before and after actions
end
</code></pre>

<p>  end</p>

<p>  def down
  end
end
```</p>

<h2>Supported callbacks</h2>

<p>In the above example I show only two rails callbacks. Here's a list of the supported callbacks you also can disable with it.</p>

<ul>
<li><code>:after_initialize</code></li>
<li><code>:after_find</code></li>
<li><code>:after_touch</code></li>
<li><code>:before_validation</code></li>
<li><code>:after_validation</code></li>
<li><code>:before_save</code></li>
<li><code>:around_save</code></li>
<li><code>:after_save</code></li>
<li><code>:before_create</code></li>
<li><code>:around_create</code></li>
<li><code>:after_create</code></li>
<li><code>:before_update</code></li>
<li><code>:around_update</code></li>
<li><code>:after_update</code></li>
<li><code>:before_destroy</code></li>
<li><code>:around_destroy</code></li>
<li><code>:after_destroy</code></li>
<li><code>:after_commit</code></li>
<li><code>:after_rollback</code></li>
</ul>


<p>Hope these could help you out some day =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shrinking your git repository]]></title>
    <link href="http://manuel.manuelles.nl/blog/2011/12/22/shrinking-your-git-repository/"/>
    <updated>2011-12-22T15:01:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2011/12/22/shrinking-your-git-repository</id>
    <content type="html"><![CDATA[<p>In the past weeks I've looked into a problem that kept us from releasing to <a href="http://www.heroku.com/" title="Heroku">Heroku</a>, because the git repository was to large. In time the repository has grown to approximate <strong>180 Mb</strong>.</p>

<p><img class="right" src="/images/posts/shrink-mario.jpg" width="140" height="140" title="Shrink!" ></p>

<p>In the past we've made some decisions that we probably wouldn't take again. We for example, we decided to store the gem files in the vendor folder and having the rails code included in our repository. Our goal then was, that releasing the project with <a href="http://www.capify.org" title="Capistrano">Capistrano</a> would be easier and faster, because it didn't have to download all the gem's.</p>

<p>Anyway at this point we don't have the gem's stored anymore in the vendor folder. Since tools like <a href="http://beginrescueend.com/" title="Ruby version Manager">RVM</a> and <a href="https://github.com/sstephenson/rbenv/" title="rbenv">rbenv</a> we store these within the ruby/rails version of that specific project.</p>

<p>Still we have the problem that the repository contains files etc. we want to remove to shrink the size of it.</p>

<h2>Find large files from your git history</h2>

<p>First we have to track down what files are making our repository so large. I've found a perl script that scans your repository for files of a specific size. Here's the code:</p>

<p><div><script src='https://gist.github.com/1354502.js?file='></script>
<noscript><pre><code>#!/usr/bin/perl
use 5.008;
use strict;
use Memoize;

# usage:
# git-large-files 500k
# git-large-files 0.5m
# git-large-files 5b

sub usage { die &quot;usage: git-large-files &lt;size[b|k|m]&gt; [&lt;git-log arguments ...&gt;]\n&quot; }

@ARGV or usage();
my ( $max_size, $unit ) = ( shift =~ /^(\d+)([bkm]?)\z/ ) ? ( $1, $2 ) : usage();

my $exp = 10 * ( $unit eq 'b' ? 0 : $unit eq 'k' ? 1 : 2 );
my $cutoff = $max_size * 2**$exp;

sub walk_tree {
    my ( $tree, @path ) = @_;
    my @subtree;
    my @r;

    {
        open my $ls_tree, '-|', git =&gt; 'ls-tree' =&gt; -l =&gt; $tree
            or die &quot;Couldn't open pipe to git-ls-tree: $!\n&quot;;

        while ( &lt;$ls_tree&gt; ) {
            my ( $type, $sha1, $size, $name ) = /\A[0-7]{6} (\S+) (\S+) +(\S+)\t(.*)/;
            if ( $type eq 'tree' ) {
                push @subtree, [ $sha1, $name ];
            }
            elsif ( $type eq 'blob' and $size &gt;= $cutoff ) {
                push @r, [ $size, @path, $name ];
            }
        }
    }

    push @r, walk_tree( $_-&gt;[0], @path, $_-&gt;[1] )
        for @subtree;

    return @r;
}

memoize 'walk_tree';

open my $log, '-|', git =&gt; log =&gt; @ARGV, '--pretty=format:%T %h %cr'
    or die &quot;Couldn't open pipe to git-log: $!\n&quot;;

my %seen;
while ( &lt;$log&gt; ) {
    chomp;
    my ( $tree, $commit, $age ) = split &quot; &quot;, $_, 3;
    my $is_header_printed;
    for ( walk_tree( $tree ) ) {
        my ( $size, @path ) = @$_;
        my $path = join '/', @path;
        next if $seen{ $path }++;
        print &quot;$commit $age\n&quot; if not $is_header_printed++;
        print &quot;\t$size\t$path\n&quot;;
    }
}</code></pre></noscript></div>
</p>

<p>So I've placed this file within my repository and executed the below command to see all files, from all commits, that are bigger then <strong>500 Kb</strong></p>

<p><code>
perl git-large-files.pl 500k
</code></p>

<p>This give's you an output like:</p>

<p><code>
9794784 6 weeks ago
  609280  vendor/cache/builder-3.0.0.gem
  823808  vendor/cache/ffi-1.0.9.gem
  801792  vendor/cache/gherkin-2.4.21.gem
.... more ....
874451c 3 months ago
  609280  vendor/bundle/ruby/1.9.1/cache/builder-3.0.0.gem
  823808  vendor/bundle/ruby/1.9.1/cache/ffi-1.0.9.gem
  801792  vendor/bundle/ruby/1.9.1/cache/gherkin-2.4.21.gem
.... more ....
47ebdca 1 year, 1 month ago
  15467626  vendor/gems/webrat-0.7.1/vendor/selenium-server.jar
  6185324 vendor/rails/activerecord/examples/performance.sql
  14465482  log/development.log
</code></p>

<p>As you can see the following folders contain data that we don't need anymore and fills our repository with unused data:</p>

<ol>
<li>vendor/cache/*</li>
<li>vendor/bundle/*</li>
<li>vendor/rails/*</li>
<li>log/development.log</li>
</ol>


<h2>Removing the files from git</h2>

<p>To remove the folders specified above I used the commands specified by the <a href="http://help.github.com/remove-sensitive-data/" title="GitHub Help: Remove sensitive data">Remove sensitive data</a> post from GitHub Help</p>

<p>The only thing I changed was adding <code>-rf</code> to the <code>git rm</code> command to recursively force remove the files because I am dealing with multiple files/folders within the target folder.</p>

<h3>Rewrite history</h3>

<p>The final command I used was:</p>

<p><code>
git filter-branch -f --index-filter 'git rm -rf --cached --ignore-unmatch vendor/cache/* vendor/bundle/* vendor/rails/* log/development.log' --prune-empty -- --all
</code></p>

<p>Mind the <code>vendor/cache/* vendor/bundle/* vendor/rails/* log/development.log</code> part. You can provide multiple path's</p>

<p>When the command is finished, the history has been rewritten, but still the size of the repository hasn't changed at this point.</p>

<h3>Cleanup and reclaim space</h3>

<p>You have to execute the following commands to also remove the files from you local repository.</p>

<p><code>
rm -rf .git/refs/original/
git reflog expire --expire=now --all
git gc --aggressive --prune=now
</code></p>

<p>Now we can force push our repository so that others can enjoy our effort.</p>

<p><code>
git push origin master --force
</code></p>

<h2>The result (98,55% smaller)</h2>

<p>After following the above steps our repository was shrinked by <strong>98,55 %!</strong>. First the repository was 180 Mb and now it is <strong>2.6 Mb</strong></p>

<p>Ofcourse we had this numbers because there were alot of gem files within our repository that were updated frequently and pushed over and over again to the master branch.</p>

<p>I hope this post will help other's to track large files within there git repository and how they can remove them to shrink the size of there repostiories.</p>
]]></content>
  </entry>
  
</feed>
