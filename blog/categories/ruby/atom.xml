<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2012-03-03T21:50:30+01:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mollie Bank]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/02/29/mollie-bank/"/>
    <updated>2012-02-29T21:29:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/02/29/mollie-bank</id>
    <content type="html"><![CDATA[<p>The past week I've been working with the iDeal API from Mollie. <a href="http://www.mollie.nl/">Mollie</a> is a company that give's us developers an easy way to make iDeal payments through there API, for a small fee.</p>

<p>After a long search I wasn't able to find a stable, well tested gem, I could use in our Rails project, so I developed the <a href="https://rubygems.org/gems/ideal-mollie">ideal-mollie gem</a>. After I finishing this gem, there was only one problem.</p>

<p>When you want to test a iDeal transaction with the Mollie test bank, you <strong>MUST</strong> do some routing, so that Mollie can send you a request if the payment was paid or not, to your local machine from the internet. So I made a alternative Mollie test bank you can use for what ever programming language you use for making Mollie iDeal payments without the routing problems.</p>

<!-- more -->


<h2>There's a gem for that!</h2>

<p>I've came op with a gem that runs a small <a href="http://www.sinatrarb.com/">Sinatra</a> application that does exactly the same as the Mollie test bank, only it runs on your local machine, which means you can redirect to <code>localhost</code> and more important, it can perform the payment check.</p>

<p>Here you can find the <a href="https://rubygems.org/gems/mollie-bank">mollie-bank gem</a>, and the <a href="https://github.com/manuelvanrijn/mollie-bank">source code</a></p>

<p><img src="/images/posts/mollie-bank.png"></p>

<h2>Install en run!</h2>

<p>To use mollie-bank just install the gem by running</p>

<p><code>
gem install mollie-bank
</code></p>

<p>and then run it</p>

<p><code>
mollie-bank
</code></p>

<p>At this point, you can go to <a href="http://localhost:4567/">http://localhost:4567/</a> and you'll see an intro page.</p>

<h2>Setup your application</h2>

<p>Alright so now you only have to make sure that when you're developing on your local machine, you don't make the requests to Mollie but to your locally running Mollie Bank.</p>

<p>To do this you just have to change <code>https://secure.mollie.nl</code> into <code>http://localhost:4567</code> in you code.</p>

<h2>Todo</h2>

<p>At this point I've only wrote a sample implementation for <a href="http://rubyonrails.org/" title="Ruby on Rails">Ruby on Rails</a> on the <a href="https://github.com/manuelvanrijn/mollie-bank/wiki/Implement-into-existing-modules">Implement into existing modules Wiki</a> page, but soon there will be more examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Rake, pull me that DB!”]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/01/19/rake-pull-me-that-db/"/>
    <updated>2012-01-19T15:15:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/01/19/rake-pull-me-that-db</id>
    <content type="html"><![CDATA[<p>After writing my last article how to <a href="http://manuel.manuelles.nl/blog/2012/01/18/convert-postgresql-to-sqlite/" title="How to: Convert a PostgreSQL database to a SQLite database">Convert PostgreSQL to SQLite</a>, I was asked why this couldn't be automated?</p>

<p>So I started coding and managed to create a <a href="http://rake.rubyforge.org/" title="Rake -- Ruby Make">Rake</a> task that will do all of the steps I described in the article in just a few seconds!</p>

<!-- more -->


<h2>Update</h2>

<p>Today a found a project that does exactly the samething as the below rake task, but with support for more db providers. <a href="http://www.herko.com">Heroku</a> uses this project for retrieving and pushing you database to the heroku database server.</p>

<p>The project is called Taps and can be found here: <a href="http://adam.heroku.com/past/2009/2/11/taps_for_easy_database_transfers/">http://adam.heroku.com/past/2009/2/11/taps_for_easy_database_transfers</a></p>

<h2>What will it do?</h2>

<ol>
<li>remove old dump and ssh the new dump to <code>tmp/dump.sql</code></li>
<li>converts the dumped SQL in to a valid format for SQLite</li>
<li>remembers the version number of the migration on the production db</li>
<li>backup, create and migrates the development SQLite to the version remembered</li>
<li>import the SQL</li>
<li>tell you all went well</li>
</ol>


<h2>Configuration</h2>

<p>To use the Rake task, you have to add 2 additional fields (<code>ssh_user</code> and <code>ssh_host</code>) to your <code>database.yml</code> file. These fields are used to create an ssh connection for retrieving the PostgreSQL dump.</p>

<p>Here's example of a modified <code>config/database.yml</code>:</p>

<p><div><script src='https://gist.github.com/1640429.js?file=database.yml'></script>
<noscript><pre><code>development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

production:
  ssh_user: root                  # &lt;-- add username for ssh
  ssh_host: productionserver.com  # &lt;-- add hostname for ssh
  adapter: postgresql
  host: localhost
  port: 5432
  username: db_user
  password: db_pass
  database: db_name
  schema_search_path: public
  encoding: utf8
  template: template0</code></pre></noscript></div>
</p>

<h2>Get the Rake file</h2>

<p>Put the following code into <code>libs/tasks/database.rake</code></p>

<p><div><script src='https://gist.github.com/1640429.js?file=database.rake'></script>
<noscript><pre><code>require 'fileutils'

namespace :db do
  desc 'pull the production PostgreSQL database into the development SQLite'
  task :pull do
    Rake::Task['db:download_pg_dump'].invoke
    Rake::Task['db:optimze_pg_dump_for_sqlite'].invoke
    Rake::Task['db:recreate_with_dump'].invoke
  end

  desc 'download the pg_dump content into tmp/dump.sql'
  task :download_pg_dump do
    config = Rails.application.config.database_configuration

    abort &quot;Missing production database config&quot; if config['production'].blank?

    dev  = config['development']
    prod = config['production']

    abort &quot;Development db is not sqlite3&quot; unless dev['adapter'] =~ /sqlite3/
    abort &quot;Production db is not postgresql&quot; unless prod['adapter'] =~ /postgresql/
    abort &quot;Missing ssh host&quot; if prod['ssh_host'].blank?
    abort &quot;Missing database name&quot; if prod['database'].blank?

    # remove the old one
    if File.exists?(pg_dump_file_path)
      File.delete(pg_dump_file_path)
    end

    cmd  = &quot;ssh -C &quot;
    cmd &lt;&lt; &quot;#{prod['ssh_user']}@&quot; if prod['ssh_user'].present?
    cmd &lt;&lt; &quot;#{prod['ssh_host']} &quot;
    cmd &lt;&lt; &quot;PGPASSWORD=#{prod['password']} &quot;
    cmd &lt;&lt; &quot;pg_dump --data-only --inserts &quot;
    cmd &lt;&lt; &quot;--username=#{prod['username']} #{prod['database']} &gt; &quot;
    cmd &lt;&lt; pg_dump_file_path

    system `#{cmd}`
  end

  desc 'remove unused statements and optimze sql for SQLite'
  task :optimze_pg_dump_for_sqlite do
    result = []
    lines = File.readlines(pg_dump_file_path)
    @version = 0
    lines.each do | line |
      next if line =~ /SELECT pg_catalog.setval/  # sequence value's
      next if line =~ /SET /                      # postgres specific config
      next if line =~ /--/                        # comment

      if line =~ /INSERT INTO schema_migrations/
        @version = line.match(/INSERT INTO schema_migrations VALUES \('([\d]*)/)[1]
      end

      # replace true and false for 't' and 'f'
      line.gsub!(&quot;true&quot;,&quot;'t'&quot;)
      line.gsub!(&quot;false&quot;,&quot;'f'&quot;)
      result &lt;&lt; line
    end

    File.open(pg_dump_file_path, &quot;w&quot;) do |f|
      # Add BEGIN and END so we add it to 1 transaction. Increase speed!
      f.puts(&quot;BEGIN;&quot;)
      result.each{|line| f.puts(line) unless line.blank?}
      f.puts(&quot;END;&quot;)
    end
  end

  desc 'backup development.sqlite3 and create a new one with the dumped data'
  task :recreate_with_dump do
    # sqlite so backup
    database = Rails.configuration.database_configuration['development']['database']
    database_path = File.expand_path(&quot;#{Rails.root}/#{database}&quot;)
    # remove old backup
    if File.exists?(database_path + '.backup')
      File.delete(database_path + '.backup')
    end
    # copy current for backup
    FileUtils.cp database_path, database_path + '.backup' if File.exists?(database_path)

    # dropping and re-creating db
    ENV['VERSION'] = @version
    Rake::Task['db:drop'].invoke
    Rake::Task[&quot;db:migrate&quot;].invoke

    puts &quot;migrated to version: #{@version}&quot;
    puts &quot;importing...&quot;
    # remove migration info
    system `sqlite3 #{database_path} &quot;delete from schema_migrations;&quot;`
    # import dump.sql
    system `sqlite3 #{database_path} &quot;.read #{pg_dump_file_path}&quot;`

    puts &quot;DONE!&quot;
    puts &quot;NOTE: you're now migrated to version #{@version}. Please run db:migrate to apply newer migrations&quot;
  end

  def pg_dump_file_path
    File.expand_path(&quot;#{Rails.root}/tmp/dump.sql&quot;)
  end
end</code></pre></noscript></div>
</p>

<h2>Usage</h2>

<p><code>
bundle exec rake db:pull
</code></p>

<h3>No SSH?</h3>

<p>If you want to skip the step where the rake tasks get's the dump using ssh, you have to copy the dump.sql into the tmp folder by yourself (note that the name <strong>must</strong> be <code>dump.sql</code>)</p>

<p>After you copied it, you should execute the following commands, to generate the development database with the dumped sql.</p>

<p><code>
bundle exec rake db:optimze_pg_dump_for_sqlite
bundle exec rake db:recreate_with_dump
</code></p>

<h3>Want to skip entering the ssh password every time?</h3>

<p>You could generate a public/private key pair with RSA and append that key to the production server so you don't have to enter the password over and over again to connect with ssh.</p>

<h4>1. Generate a public/private key pair with RSA</h4>

<p>First check if you haven't already generated a <code>id_rsa</code> file in your <code>$HOME/.shh</code> folder. If you already have a <code>id_rsa</code> file continue with step 2.</p>

<p>Run the following command on you local machine and accept the defaults.</p>

<p><code>
ssh-keygen -t rsa
</code></p>

<p>This command creates an RSA public/private key pair in your <code>$HOME/.ssh</code> directory. The private key is <code>~/.ssh/id_rsa</code> and the public key is <code>~/.ssh/id_rsa.pub</code></p>

<h4>2. Install public key on remote machine</h4>

<p>Now you can copy the public key to the remote machine by executing the following command:</p>

<p><code>
ssh-copy-id -i root@productionserver.com
</code></p>

<p>This command will ask you to enter the ssh password for the ssh user "root" for the hostname "productionserver.com".</p>

<p>After you've enter the password (for the last time) you can create a ssh connection without entering the password by executing:</p>

<p><code>
ssh root@productionserver.com
</code></p>
]]></content>
  </entry>
  
</feed>
