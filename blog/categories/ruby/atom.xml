<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2014-11-21T14:31:53+01:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developing Ruby on Rails on Windows]]></title>
    <link href="http://manuel.manuelles.nl/blog/2013/07/23/developing-ruby-on-rails-on-windows/"/>
    <updated>2013-07-23T23:06:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2013/07/23/developing-ruby-on-rails-on-windows</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/03/04/rails-belongs-to-to-has-many/"><img class="right" src="/images/posts/developing-ruby-on-rails-on-windows.png" width="250" height="250" title="Develop Ruby on Rails on Windows" ></a> I do a lot of C# web development which means I have to work with Visual Studio on Windows. I usually grab the Mac to do my Ruby on Rails development, but it would be easier not to switch every time I have to do C# and Ruby development.</p>

<p>A while ago I tried several things getting a fast Rails experience on Windows, but it failed. It was just too slow ... until now! In this post I'd like to share my current setup which I plan to use as long as it pleases me.</p>

<!-- more -->


<h2>What are we going to do?</h2>

<p>We are going to install <a href="http://www.vagrantup.com/">Vagrant</a> which uses <a href="https://www.virtualbox.org/">VirtualBox</a> to build a complete development environment. Also we will create and use some <a href="http://community.opscode.com/">recipes for Chef</a> to automatically install and configure the development environment. Think of installing Ruby, PostgreSQL, and MySQL etc. automatically.</p>

<h2>Installing Vagrant and VirtualBox</h2>

<p>First let's setup our Windows machine with the needed software.</p>

<ol>
<li>Install <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a></li>
<li>Install <a href="http://downloads.vagrantup.com/">Vagrant</a></li>
<li>After reboot add the VirtualBox folder to your PATH variable<br />(something like: <code>c:\Program Files\Oracle\VirtualBox</code>)</li>
<li>Install <a href="http://www.vagrantbox.es/">a base box</a> (I used Ubuntu precise 64 VirtualBox) with the following command
<code>vagrant box add precise64 http://files.vagrantup.com/precise64.box</code></li>
</ol>


<h2>Prepare your Rails project</h2>

<p>Next we have to configure our project to create a box from the base box and make it install all our goodies we need to run our Rails application.</p>

<h3>Setup Chef (Librarian)</h3>

<p>I'm using a gem called <a href="https://github.com/applicationsonline/librarian-chef">librarian-chef</a> which actually is a bundler for your Chef recipes.</p>

<p>To install run the following from the root of you project:</p>

<p>``` bash</p>

<h1>Install librarian-chef</h1>

<p>gem install librarian-chef</p>

<h1>Add its work directories to your gitignore</h1>

<p>echo chef/cookbooks >> .gitignore
echo chef/tmp >> .gitignore</p>

<h1>OPTIONAL: you can add the Cheffile.lock which holds the currently installed versions</h1>

<h1>just like bundler does</h1>

<p>echo chef/Cheffile.lock >> .gitignore</p>

<h1>Create the Librarian config file and needed folders</h1>

<p>mkdir -p chef
cd chef
mkdir -p roles
mkdir -p site-cookbooks
librarian-chef init
```</p>

<h4>WUT?! gem install librarian-chef?</h4>

<p>I know we are trying to create a non-Ruby Windows solution but we do need this gem to work on Windows to complete our setup with Chef. If you really don't want Ruby being installed on Windows, you should do the above steps on UNIX or OSX and also have to commit the cookbooks. This means we're back at 1900 where everybody stuffed there vendor folder with code they found... If you do want to perform this on Windows and haven't already installed Ruby, you should do this now (I suggest <a href="http://rubyinstaller.org/downloads/">RubyInstaller</a>).</p>

<h3>Configure Chef</h3>

<p>The command <code>librarian-chef init</code> created the file <code>chef/Cheffile</code> where we can add our cookbooks. Mine contains the following:</p>

<p>``` ruby <strong>chef/Cheffile</strong></p>

<h1>!/usr/bin/env ruby</h1>

<h1>^syntax detection</h1>

<p>site 'http://community.opscode.com/api/v1'</p>

<p>cookbook 'apt'
cookbook 'git'
cookbook 'sqlite'
cookbook 'mysql'
cookbook 'postgresql'
cookbook 'database', :git => 'git://github.com/manuelvanrijn/cookbook-database.git', :ref => 'grant-roles'
cookbook 'nodejs'
cookbook 'build-essential'
cookbook 'ruby_build'
cookbook 'rbenv', :git => 'git://github.com/fnichol/chef-rbenv.git', :ref => 'v0.7.2'
```</p>

<p>As you can see I've setup Git, Ruby with rbenv, SQLite, MySQL, PostgreSQL and node.js for the asset pipeline. The <code>apt</code> cookbook is for running <code>apt-get dist-upgrade</code> and the cookbook <code>database</code> will be used later to create users to access the databases.</p>

<p>You could skip one or two of the database servers if you like, but it can't harm if you do install them all and don't use them.</p>

<p>Note: the <code>database</code> cookbook is provided with additional actions to set superuser privileges to PostgreSQL and MySQL.</p>

<h4>Downloading the cookbooks</h4>

<p>Now that we have defined our cookbooks we need to run our final command so that Chef downloads them. Just as you would do with bundler we now run the following command from our <code>chef/</code> folder</p>

<p><code>bash
librarian-chef install
</code></p>

<h3>Adding our custom recipes</h3>

<p>I had some difficulties with running <code>bundle install</code> because the Vagrant user didn't have permissions on the rbenv gem folder, so I had to add a custom recipe for this. Also I've added a recipe to modify the <code>pg_hba.conf</code> file of PostgreSQL so that we can connect with the virtual machine. Finally I've created a file to add our database users with full permissions. Here are the 3 files I added:</p>

<p>``` ruby <strong>chef/site-cookbooks/database/recipes/default.rb</strong></p>

<h1>Setup database servers</h1>

<p>#</p>

<h1>1. Setup MySQL and PostgreSQL</h1>

<h1>2. Create a rails user with a blank password with full control</h1>

<h1>MySQL</h1>

<p>mysql_connection_info = {
  :host     => "localhost",
  :username => 'root',
  :password => node['mysql']['server_root_password']
}</p>

<h1>'rails'@'localhost'</h1>

<p>mysql_database_user 'rails' do
  connection mysql_connection_info
  password ''
  host 'localhost'
  privileges ["ALL PRIVILEGES"]
  grant_option true
  action :grant
end</p>

<h1>'rails'@'%'</h1>

<p>mysql_database_user 'rails' do
  connection mysql_connection_info
  password ''
  host '%'
  privileges ["ALL PRIVILEGES"]
  grant_option true
  action :grant
end</p>

<h1>PostgreSQL</h1>

<p>template "#{node[:postgresql][:dir]}/pg_hba.conf" do
  source "pg_hba.conf.erb"
  notifies :restart, "service[postgresql]", :immediately
end</p>

<p>postgresql_connection_info = {
  :host     => "localhost",
  :password => node['postgresql']['password']['postgres']
}</p>

<p>postgresql_database_user 'rails' do
  connection postgresql_connection_info
  password ''
  role_attributes :superuser => true, :createdb => true
  action :create
end
```</p>

<p><code>ruby &lt;strong&gt;chef/site-cookbooks/database/templates/default/pg_hba.conf.erb&lt;/strong&gt;
local   all             all                                     trust
host    all             all             127.0.0.1/32            trust
host    all             all             ::1/128                 trust
</code></p>

<p>``` ruby <strong>chef/site-cookbooks/postinstall/recipes/default.rb</strong>
group "rbenv" do
  action :create
  members "vagrant"
  gid 1100
  append true
end</p>

<p>bash "chgrp and chmod" do
  user "root"
  cwd "/usr/local"
  code &lt;&lt;-EOH</p>

<pre><code>chgrp -R rbenv rbenv
chmod -R g+rwxX rbenv
</code></pre>

<p>  EOH
end
```</p>

<h3>Adding our role</h3>

<p>Next we have to create a role that defines what recipes should be executed in what order. Create the file <code>chef/roles/rails-dev.rb</code> containing the following content:</p>

<p>``` ruby <strong>chef/roles/rails-dev.rb</strong>
name "rails-dev"
description "setup for ruby on rails core development"
run_list(
  "recipe[apt]",
  "recipe[git]",
  "recipe[sqlite]",
  "recipe[mysql::client]",
  "recipe[mysql::ruby]",
  "recipe[mysql::server]",
  "recipe[postgresql::ruby]",
  "recipe[postgresql::server]",
  "recipe[nodejs::install_from_binary]",
  "recipe[ruby_build]",
  "recipe[rbenv::system]",
  "recipe[rbenv::vagrant]",
  "recipe[database]",
  "recipe[postinstall]"
)
default_attributes(
  "build_essential" => {</p>

<pre><code>"compiletime" =&gt; true
</code></pre>

<p>  }
)
```</p>

<p>If you removed some cookbooks from the <code>chef/Cheffile</code> you should also remove them here.</p>

<h3>Setup Vagrant</h3>

<p>Next we need to create a <code>Vagrantfile</code> that contains the configurations for creating a box from the base box. Create the config file by running from the root of you project:</p>

<p><code>bash
vagrant init precise64
</code></p>

<p>Note: <code>precise64</code> is the name we used with the <code>vagrant box add</code> command from step 4 above.</p>

<p>Also we want to add the virtual machine folder to our <code>.gitignore</code> file:</p>

<p><code>bash
echo .vagrant &gt;&gt; .gitignore
</code></p>

<h4>Modify the Vagrantfile</h4>

<p>Here's the stripped version of how my file looks like:</p>

<p>``` ruby Vagrantfile
Vagrant.configure("2") do |config|
  config.vm.box = "precise64"</p>

<p>  config.vm.box_url = "http://files.vagrantup.com/precise64.box"</p>

<p>  config.vm.network :forwarded_port, guest: 3000, host: 3000  # forward the default rails port
  config.vm.network :forwarded_port, guest: 3306, host: 3306  # forward the MySQL port
  config.vm.network :forwarded_port, guest: 5432, host: 5432  # forward the PostgreSQL port</p>

<p>  config.vm.provision :shell, :inline => "gem install chef --version 11.6.0"</p>

<p>  config.vm.provision :chef_solo do |chef|</p>

<pre><code>chef.cookbooks_path = ["chef/cookbooks", "chef/site-cookbooks"]
chef.roles_path     = [[:host, "chef/roles"]]

chef.add_role "rails-dev"
chef.json = {
  "mysql" =&gt; {
    "server_root_password"   =&gt; "",
    "server_debian_password" =&gt; "",
    "server_repl_password"   =&gt; ""
  },
  "postgresql" =&gt; {
    "password" =&gt; {
      "postgres" =&gt; ""
    }
  },
  "rbenv" =&gt; {
    "global" =&gt; "2.0.0-p247",
    "rubies" =&gt; ["2.0.0-p247"],
    "gems" =&gt; {
      "2.0.0-p247" =&gt; [
        { "name" =&gt; "bundler" }
      ]
    }
  }
}
</code></pre>

<p>  end
end
```</p>

<h2>Ready to rock!</h2>

<p>Alright we're ready. We now can boot up Vagrant which will take some time the first time because it will create a new box from the base box and install all the cookbooks. From then you're able to connect with the box and use it just like you would do on UNIX or OSX.</p>

<p>``` bash</p>

<h1>starts and setups the box</h1>

<p>vagrant up</p>

<h1>... now we wait ...</h1>

<h1>connect to the box with ssh</h1>

<p>vagrant ssh</p>

<h1>install gems and run the server on the box for a Rails application</h1>

<p>cd /vagrant
bundle install
bundle exec rails s
```</p>

<h3>What we've created</h3>

<p>A VirtualBox with Ubuntu precise 64 installed and containing the following software/configurations:</p>

<ul>
<li>Software:

<ol>
<li>rbenv with ruby-build</li>
<li>ruby-2.0.0-p247</li>
<li>Git</li>
<li>SQLite</li>
<li>MySQL with user: <code>rails</code> with a empty password</li>
<li>PostgreSQL with user: <code>rails</code> with a empty password</li>
<li>node.js</li>
</ol>
</li>
<li>Ports:

<ol>
<li><code>localhost:3000</code> goes to <code>vagrant-box:3000</code></li>
<li><code>localhost:3306</code> goes to <code>vagrant-box:3306</code></li>
<li><code>localhost:5432</code> goes to <code>vagrant-box:5432</code></li>
</ol>
</li>
</ul>


<h2>Develop workflow</h2>

<p>If you have to run specific Ruby (on Rails) tasks like <code>rspec</code> or <code>bundle exec rails g migration</code> you should do this within the ssh session of your box.</p>

<p>Editing files can be done on your Windows machine, because the root of you project is directly binded to the <code>/vagrant/</code> folder on the box.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails belongs_to to has_many]]></title>
    <link href="http://manuel.manuelles.nl/blog/2013/03/04/rails-belongs-to-to-has-many/"/>
    <updated>2013-03-04T17:19:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2013/03/04/rails-belongs-to-to-has-many</id>
    <content type="html"><![CDATA[<p><a href="/blog/2013/03/04/rails-belongs-to-to-has-many/"><img class="left" src="/images/posts/habtm-migration.jpg" width="250" height="250" title="Migration what?!" ></a> Today I had to change a <code>belongs_to</code> associate to an <code>has_and_belongs_to_many</code> in a Rails project I'm currently working on. Not that hard you would say, but there were some catches for deploying/migrating these changes to the production environment.</p>

<br />


<p>In this post I'd like to explain how to achieve this without having to do multiple deployments of your model to maintain a consistent database schema and model.</p>

<!-- more -->


<h2>TL;DR;</h2>

<p>Here you can find <a href="#final-migration">the final migration</a>. Note that this example could also be solved with plain sql instead of using ActiveRecord, but there might be cases were you depend on the ActiveRecord associates. In these cases this is a great workaround</p>

<h2>The problem</h2>

<p>Let's say we have a Article that belongs to a Category. Our model would look like something like this:</p>

<p><code>ruby
class Article &lt; ActiveRecord::Base
  attr_accessible :title, :content
  belongs_to :category
end
</code></p>

<p>And the executed migration would look like this:</p>

<p>```ruby
class CreateArticle &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :articles do |t|
  t.string :title
  t.text :content
  t.references :category
end
</code></pre>

<p>  end
end
```</p>

<h2>The initial migration</h2>

<p>First let's create a new table that can hold the associate between multiple Articles and Categories. The migration would look like this:</p>

<p>```ruby
class MultipleCategoriesForArticles &lt; ActiveRecord::Migration
  def up</p>

<pre><code>create_table :articles_categories, :id =&gt; false do |t|
  t.references :article, :category
end
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>drop_table :articles_categories
</code></pre>

<p>  end
end
```</p>

<p>At this point all is fine and we can migrate the database without any problems. Only this doesn't add the current category to the new collection of categories.</p>

<h3>Moving the belongs_to associate</h3>

<p>Here's were the problem actually starts, because to move the category to the categories collection for the articles, we have to define the <code>belongs_to</code> but also the <code>has_and_belongs_to_many</code> associate on the <code>Article</code> model.</p>

<p>I don't like this approach because we'll have to define both these associates and the <code>belongs_to</code> should be removed in the next release. So how to deal with this?</p>

<p><a id="final-migration"></a></p>

<h2>The fix</h2>

<p>The fix is quite simple. We remove the <code>belongs_to</code> associate from the model and only define the new <code>has_and_belongs_to_many</code> associate and within the migration we extend the model with the "old" <code>belongs_to</code> associate so we can use this within the migration.</p>

<p>So our files will look like this</p>

<p><code>ruby app/models/article.rb
class Article &lt; ActiveRecord::Base
  attr_accessible :title, :content
  has_and_belongs_to_many :categories
end
</code></p>

<p>```ruby db/migrate/20130305120000_multiple_categories_for_articles.rb
class MultipleCategoriesForArticles &lt; ActiveRecord::Migration
  def up</p>

<pre><code>create_table :articles_categories, :id =&gt; false do |t|
  t.references :article, :category
end

# define the old belongs_to category associate
Article.class_eval do
  belongs_to :old_category,
             :class_name =&gt; "Category",
             :foreign_key =&gt; "category_id"
end

# add the belongs_to category to the has_and_belongs_to_many categories
Article.all.each do | article |
  unless article.old_category.nil?
    article.categories &lt;&lt; article.old_category
    article.save
  end
end

# remove the old category_id column for the belongs_to associate
remove_column :articles, :category_id
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>add_column :articles, :category_id, :integer

Article.class_eval do
  belongs_to :new_category,
             :class_name =&gt; "Category",
             :foreign_key =&gt; "category_id"
end

Article.all.each do | article |
  # NOTE: we'll grabe the first category (if present), so if there are more, these will be lost!
  article.new_category = article.categories.first unless article.categories.empty?
  article.save
end

drop_table :articles_categories
</code></pre>

<p>  end
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq on Heroku with Redis To Go Nano]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/11/13/sidekiq-on-heroku-with-redistogo-nano/"/>
    <updated>2012-11-13T15:42:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/11/13/sidekiq-on-heroku-with-redistogo-nano</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/11/13/sidekiq-on-heroku-with-redistogo-nano/"><img class="right" src="/images/posts/redis.png" width="200" height="200" title="Redis" ></a> As a follow-up of <a href="/blog/2012/11/13/scalable-heroku-worker-for-sidekiq/">my previous post</a> I want to explain how to get <a href="http://sidekiq.org/">Sidekiq</a> to work on <a href="http://www.heroku.com">Heroku</a> with a <a href="https://addons.heroku.com/redistogo">Redis To Go</a> Nano instance.</p>

<p>Because the Nano instance has some connection limitation you have to make some config changes so you won't get <code>ERR max number of clients reached</code> error messages.</p>

<!-- more -->


<h2>Why this post</h2>

<p>Today I've been struggling a lot with getting the Sidekiq to work probably with Redis to Go Nano on Heroku. The main problem was I was having difficulties with the amount of connection's being created to the Redis server. Because the Nano variant is free but large enough for handling normal sized queues of work, we have to face the limitation of 10 connections.</p>

<h2>A calculation Tool!</h2>

<p>If you just want to know what you need to change/setup you can go directly to a small tool I've built to calculate the number of connections/concurrencies need for a number of workers/web workers etc.</p>

<p><a href="http://manuel.manuelles.nl/sidekiq-heroku-redis-calc" class="special_button">SidekiqHerokuRedis calculator</a></p>

<h2>Why ERR max number of clients reached?</h2>

<p>The error <code>Error fetching message: ERR max number of clients reached</code>, is quite clear isn't it? The actual question is how we can reduce the connections being opened to match the 10 connection limit given by the Nano instance.</p>

<p>After some research I found the factors that you have to tweak in order to reach the magic number of 10.</p>

<ol>
<li>Sidekiq Client connection size</li>
<li>Sidekiq Server connection size</li>
<li>Sidekiq Server reserved connections (reserved for the Fetcher and Retrier)</li>
<li>Sidekiq concurrency size</li>
<li>Unicorn worker_process size</li>
<li>Heroku Web Dyno count</li>
<li>Heroku Worker count</li>
</ol>


<p>The answer for all our problems could be described in the following sum:</p>

<p>max connections = (Heroku worker count * (concurrency + 2 reserved connections)) + (web dyno count * (client connection size * unicorn worker_process size))</p>

<h2>Connections and concurrencies</h2>

<p>If you have a small amount of Redis connections we need to make some modifications in order to get all our processes happy and not throwing connection errors around.</p>

<p>At the bottom of this post I'll put my final configuration files.</p>

<h3>Dynos * (unicorns * client size)</h3>

<p>The first thing I changed was the Redis connection size for the client. By default Sidekiq takes <strong>5</strong> connections per client. Because my applications only queries Redis for adding tasks to the Sidekiq queue, one connection should be more than enough.</p>

<p><span class='pullquote-right' data-pullquote='3 workers * dyno count = redis_connections'>
One mistake I made was forgetting about the number of dynos and Unicorn worker_process size. In my <code>app/config/unicorn.rb</code> I had <code>worker_processes 3</code> defined which actually means 3 workers * dyno count = redis_connections taken by the Client.
</span></p>

<h4>Examples:</h4>

<p>In my case where I've set the connection size to one we could have the following examples</p>

<ol>
<li><strong>1</strong> web dyno with <strong>2</strong> unicorn worker_processes takes <strong>2 Redis connections</strong></li>
<li><strong>2</strong> web dyno with <strong>2</strong> unicorn worker_processes takes <strong>4 Redis connections</strong></li>
<li><strong>5</strong> web dyno with <strong>4</strong> unicorn worker_processes takes <strong>20 Redis connections</strong></li>
</ol>


<p>If you up the client size to, for example 3 you should also multiply the Redis connections by this number (so for example 3 you'll have 20 * 3 = 60 connections).</p>

<h3>Worker * (concurrency + 2)</h3>

<p>When calculating the number of connections the Sidekiq server needs, we need to modify the number of currencies it initializes on launch. This number represents the number of threads created by the Sidekiq server which will perform queued tasks. Each concurrency/thread takes up 1 Redis connection.</p>

<p>When tweaking this number I found out the Sidekiq server took 2 additional connections upon the concurrency number. This seemed to be default behavior becase Sidekiq server uses these two for the Fetcher and Retrier commands.</p>

<h4>Examples:</h4>

<ol>
<li><strong>1</strong> worker dyno running Sidekiq, with <strong>1</strong> concurrency takes <strong>3 Redis connections</strong></li>
<li><strong>1</strong> worker dyno running Sidekiq, with <strong>2</strong> concurrency takes <strong>4 Redis connections</strong></li>
<li><strong>2</strong> worker dyno running Sidekiq, with <strong>2</strong> concurrency takes <strong>8 Redis connections</strong></li>
</ol>


<p>The default concurrency size of Sidekiq is set to 25 which mean that without modifications you need at least 27 Redis connections for the Sidekiq server.</p>

<h2>My final code</h2>

<p><code>bash
connection limit:           10
unicorn processes:           3
web dynos:                   2
worker dynos (sidekiq):      1
client pool size:            1
server pool size:            2
concurrency:                 2
</code></p>

<p>``` ruby app/config/initializers/sidekiq.rb
require 'sidekiq'</p>

<p>Sidekiq.configure_client do |config|
  config.redis = { :size => 1 }
end</p>

<p>Sidekiq.configure_server do |config|
  config.redis = { :size => 2 }
end
```</p>

<p><code>yaml app/config/sidekiq.yml
:concurrency: 2
</code></p>

<p><code>bash Procfile
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
worker: bundle exec sidekiq -e production -C config/sidekiq.yml
</code></p>

<p><code>ruby app/config/unicorn.rb
worker_processes 3
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scalable Heroku worker for Sidekiq]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/11/13/scalable-heroku-worker-for-sidekiq/"/>
    <updated>2012-11-13T09:02:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/11/13/scalable-heroku-worker-for-sidekiq</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/11/13/scalable-heroku-worker-for-sidekiq/"><img class="left" src="/images/posts/more-workers.jpg" width="200" height="200" title="More workers" ></a> In this post I'd like to show you guys how to deploy your Rails application to <a href="http://www.heroku.com/">Heroku</a> with a <a href="http://sidekiq.org/">Sidekiq</a> worker that only gets initiated when there are tasks in the queue to process.</p>

<p>Our goal is to start a worker when a task is added to the queue and to destroy the worker after its done processing the queue tasks. This will result in a much lower bill at the end of the month because the worker doesn't have to be up the whole month.</p>

<!-- more -->


<h2>Setting up Sidekiq</h2>

<p>First let's take a look at a default configuration of Sidekiq within a Rails project.</p>

<h3>Add the gem</h3>

<p>First we need to add Sidekiq to our Gemfile and run <code>bundle install</code></p>

<p><code>ruby Gemfile
gem 'sidekiq'
</code></p>

<h3>Create a Sidekiq worker</h3>

<p>The worker is very basic. It just performs some heavy task and sends an email after it finished.</p>

<p>``` ruby app/workers/my_worker.rb
class MyWorker
  include Sidekiq::Worker</p>

<p>  def perform(id)</p>

<pre><code>object = Model.find(id)
object.generate_download
UserMailer.download_is_ready(object).deliver
</code></pre>

<p>  end
end
```</p>

<h3>Procfile</h3>

<p>In our Procfile we have to define the <code>worker</code> line to start the Sidekiq server on a Heroku worker dyno.</p>

<p><code>bash Procfile
web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
worker: bundle exec sidekiq -e production
</code></p>

<h3>Move heavy task to the queue</h3>

<p>On the controller we probably have a line calling <code>object.generate_download</code> which takes to much time. We'll change this line to execute the <code>MyWorker</code> instead:</p>

<p>``` ruby app/controllers/download_controller.rb
class DownloadController &lt; ApplicationController
  def generate</p>

<pre><code>object = Model.find(param[:id])
# instead of calling object.generate_download we'll do:
MyWorker.perform_async(object.id)
</code></pre>

<p>  end
end
```</p>

<p><strong>NOTE:</strong> It's recommended not to add the whole object into the worker because this is stored in the Redis database. Also the object might be changed before it's being processed by Sidekiq. Adding the <code>id</code> and fetching the object in the worker is a better approach.</p>

<h2>So far...</h2>

<p>At this point we have configured our Rails project to add tasks to Redis and have Sidekiq perform executing the worker when a task is added. If we deploy our Rails app to Heroku we need to add the Redis To Go addon and add a Heroku worker dyno to our application.</p>

<h3>Running locally</h3>

<p>To test this locally we need:</p>

<ul>
<li>Redis installed locally and running</li>
<li>Run the Rails app (<code>bundle exec rails server</code>)</li>
<li>Run the Sidekiq server (<code>bundle exec sidekiq</code>)</li>
</ul>


<h2>Adding the autoscaler</h2>

<p>At this point the Heroku worker dyno has to be started, to pickup tasks from the queue. It's likely you do not need this worker to run the whole day because the queue might be empty most of the time. Here's where the <a href="http://github.com/JustinLove/autoscaler/">autoscaler gem</a> come's in handy.</p>

<p>This gem acts as Middleware for Sidekiq and performs the following tasks:</p>

<ol>
<li>When a task is added it checks if a Worker is present.</li>
<li>When a worker is already running it does nothing and the worker will pickup the task.</li>
<li>If there isn't a worker running it will create a Heroku worker dyno.</li>
<li>If the worker finished processing the queue it will keep the worker alive for 60 seconds just in case we add a task to the queue within this time. If no tasks are added it will destroy the worker.</li>
</ol>


<h3>Add the gem</h3>

<p>First we need to add the autoscaler gem to our Gemfile and run <code>bundle install</code></p>

<p><code>ruby Gemfile
gem 'autoscaler'
</code></p>

<h3>Adding required ENV variables</h3>

<p>The gem requires two environment variables to be set on your Heroku application. The <code>HEROKU_API_KEY</code> is required to perform creating and removing a Heroku worker dyno and the <code>HEROKU_APP</code> to know on which application it has to create/destroy the worker dyno on.</p>

<p>``` bash</p>

<h1>API KEY can be found on https://dashboard.heroku.com/account</h1>

<p>heroku config:add HEROKU_API_KEY=123-your-key-456
heroku config:add HEROKU_APP=your_heroku_app_name
```</p>

<h3>Tweaking the Sidekiq initializer</h3>

<p>Because this gem acts as Middleware we need to create a <code>sidekiq.rb</code> in our initializers folder. This file will check if we are running on Heroku and if so, activates the autoscaler as Middleware.</p>

<p>``` ruby app/config/initializers/sidekiq.rb
require 'sidekiq'
require 'autoscaler/sidekiq'
require 'autoscaler/heroku_scaler'</p>

<p>heroku = nil
if ENV['HEROKU_APP']
  heroku = Autoscaler::HerokuScaler.new
end</p>

<p>Sidekiq.configure_client do |config|
  if heroku</p>

<pre><code>config.client_middleware do |chain|
  chain.add Autoscaler::Sidekiq::Client, 'default' =&gt; heroku
end
</code></pre>

<p>  end
end</p>

<p>Sidekiq.configure_server do |config|
  config.server_middleware do |chain|</p>

<pre><code>if heroku
  p "[Sidekiq] Running on Heroku, autoscaler is used"
  chain.add(Autoscaler::Sidekiq::Server, heroku, 60) # 60 seconds timeout
else
  p "[Sidekiq] Running locally, so autoscaler isn't used"
end
</code></pre>

<p>  end
end
```</p>

<h2>Ready to go!</h2>

<p>At this point we're ready to deploy our application to Heroku and let the autscaler automatically create and destroy a worker dyno whenever it needs to process tasks from the Sidekiq queue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking MemSQL for a spin]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin/"/>
    <updated>2012-06-20T10:18:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin</id>
    <content type="html"><![CDATA[<p><a href="/blog/2012/06/20/taking-memsql-for-a-spin/"><img class="left" src="/images/posts/memsql.png" width="200" height="200" title="MemSQL" ></a> This week I read an article on <a href="http://news.ycombinator.com/item?id=4126007">HackerNews</a> about Ex-facebook employs releasing a new database server called MemSQL.</p>

<p>After viewing there <a href="http://developers.memsql.com/">product overview video</a> I got excited and wanted to take this product for a spin.</p>

<!-- more -->


<h2>What to test?</h2>

<p>First I needed a project for testing the performance on. At <a href="http://www.auxilium.nl">my work</a> we developed a Rails application that needs to validate a permit request with rules, questions, filters, answers depending on a region etc. etc. This process of validating a whole permit request takes some time because it has to perform <strong>6850 queries</strong>.</p>

<h2>Performance PostgreSQL</h2>

<p>At this moment the application runs on a PostgreSQL database so lets see what the performance is at this point:</p>

<p>```
run       user     system      total        real</p>

<h1>01  10.690000   0.540000  11.230000 ( 14.828312)</h1>

<h1>02   9.450000   0.490000   9.940000 ( 13.895988)</h1>

<h1>03   9.550000   0.470000  10.020000 ( 14.215028)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='14.312ms for 6850 queries'>
The average result is that it takes 14.312ms for 6850 queries on PostgreSQL.
</span></p>

<h2>Configuring the Rails app to use MemSQL</h2>

<p>After installing MemSQL and starting it running on port 3307, I created a new database added the existing data and changed some connection strings for the Rails app.</p>

<h3>mysql2 gem</h3>

<p>Because MemSQL is built on top of MySQL you can use all the MySQL client tools to perform operations on MemSQL.</p>

<p>The MemSQL documentation recommended using the memsql2 gem but to do this I had to install MySQL first on my machine.</p>

<h3>Failed to connect?</h3>

<p>After installing MySQL and configured the Rails application I got some strange error when starting the application.</p>

<p><code>
Failed to connect to database:
  Sequel::AdapterNotFound -&gt; LoadError: dlopen(.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle, 9): Library not loaded: /usr/local/mysql/lib/libmysqlclient.16.dylib
  Referenced from: /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
  Reason: image not found - /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
</code></p>

<p>After some googling I found out that on OSX you might need to symlink the dylib manually. <strong>NOTE</strong> Because I've installed a newer version of MySQL I have a <code>libmysqlclient.18.dylib</code> instead of the required <code>libmysqlclient.16.dylib</code>. Symlinking this file from libmysqlclient.18.dylib to libmysqlclient.16.dylib seemed to work for me.</p>

<p><code>
sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/mysql/lib/libmysqlclient.16.dylib
</code></p>

<h3>Explain not supported for joins</h3>

<p>At this point I am able to connect to the database and perform the benchmark, but I got the next error:</p>

<p><code>
ActiveRecord::StatementInvalid: Mysql2::Error: Feature 'EXPLAIN for join queries' is not supported by MemSQL.
</code></p>

<p>Apparently I've EXPLAIN queries on in my config and this isn't supported for JOIN queries as MemSQL tells us.</p>

<p>To resolve this you just have to modify/add this line in your <code>config/environment/development.rb</code></p>

<p><code>
config.active_record.auto_explain_threshold_in_seconds = nil
</code></p>

<h2>MemSQL's first spin!</h2>

<p><span class='pullquote-right' data-pullquote='first run took 3 min and 05 seconds!'>
So after resolving all these issues I was able to run the benchmark, but the first run took 3 min and 05 seconds! First I thought that this can not be right, but I forgot the fact that it generate's c code from the queries.
</span></p>

<p>On the MemSQL server I got the following output:</p>

<p><code>``sql
2908919519 2012-06-20 09:56:16 INFO: Query appdb.'SELECT </code>permit_requests<code>.* FROM</code>permit_requests<code> WHERE</code>permit_requests<code>.</code>id<code>= @ LIMIT @' compiled in 7306 milliseconds
2908983637 2012-06-20 09:56:16 WARNING: WARN DISABLED LOCKDOWN: BEGIN TRANSACTION
2916240227 2012-06-20 09:56:23 INFO: Query appdb.'SELECT </code>categories<code>.* FROM</code>categories<code> WHERE</code>categories<code>.</code>id<code>= @ ORDER BY name LIMIT @' compiled in 7203 milliseconds
2924143142 2012-06-20 09:56:31 INFO: Query appdb.'SELECT</code>questions<code>.* FROM</code>questions<code> WHERE</code>questions<code>.</code>category_id` = @ ORDER BY position' compiled in 7722 milliseconds</p>

<p>... etc ...
```</p>

<p>As you can see, generating the compiled version for every query took about 7 seconds.</p>

<h2>Performance MemSQL</h2>

<p>So below again the same table with results. The first line is the time with generating all the compiled queries:</p>

<p>```
run       user     system      total        real</p>

<h1>01   5.260000   0.360000   5.620000 (183.511099)</h1>

<h1>02   3.830000   0.260000   4.090000 (  6.657682)</h1>

<h1>03   3.790000   0.260000   4.050000 (  6.613542)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='6.635ms for 6850 queries'>
The performance boost is quite huge! The average result is 6.635ms for 6850 queries if we are skipping the first result. This means it's like 7.677ms faster!
</span></p>

<h3>Cold boot of MemSQL</h3>

<p>I've also tried the performance when I restart the database server. I just wanted to know if it keeps the data in memory and would take longer to run after a restart.</p>

<p>The result:</p>

<p>```
run       user     system      total        real</p>

<h1>01   5.110000   0.330000   5.440000 (  8.030930)</h1>

<h1>02   3.770000   0.260000   4.030000 (  6.580312)</h1>

<h1>03   3.780000   0.250000   4.030000 (  6.524884)</h1>

<p>```</p>

<p><span class='pullquote-right' data-pullquote='7.044ms for 6850 queries'>
The first time it took just a bit longer, but with an average of 7.044ms for 6850 queries this is still faster than running it on PostgreSQL!
</span></p>

<h2>Pros and Cons</h2>

<p>Here's a list with some pros and cons I noticed while experimenting with MemSQL:</p>

<h3>Pros</h3>

<ul>
<li>Blazing fast!</li>
<li>You can use all the MySQL client tools out there. Also because it uses MySQL, troubleshooting might not be an issue because it isn't a new product.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Huge cache folder! After restoring the database (15Mb) MemSQL creates a folder in the <code>plancache</code> folder which is <strong>5.5GB</strong>. So performance comes with a price I think.</li>
<li>Unable to create users. When creating the database, I tried to add a new user but this isn't supported. Maybe this is because I'm using the Developer Edition.</li>
</ul>

]]></content>
  </entry>
  
</feed>
