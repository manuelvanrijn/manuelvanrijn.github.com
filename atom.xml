<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Manuel van Rijn]]></title>
  <link href="http://manuel.manuelles.nl/atom.xml" rel="self"/>
  <link href="http://manuel.manuelles.nl/"/>
  <updated>2012-07-19T11:27:51+02:00</updated>
  <id>http://manuel.manuelles.nl/</id>
  <author>
    <name><![CDATA[Manuel van Rijn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrate Travis CI into Grunt]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt/"/>
    <updated>2012-06-22T15:04:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt</id>
    <content type="html"><![CDATA[<p><a href="http://manuel.manuelles.nl/blog/2012/06/22/integrate-travis-ci-into-grunt/"><img class="right" src="http://manuel.manuelles.nl/images/posts/travis-grunt.jpg" width="200" height="200" title="Code Fail" ></a> Today I&#8217;ve done some research how to get my latest jQuery plugin (<a href="http://manuel.manuelles.nl/jquery-numeric_input/">jquery-numeric_input</a>) to be tested automatically with the help of <a href="http://travis-ci.org/">Travis CI</a>. Travis CI is a hosted continuous integration service for open source projects.</p>

<p>Because I&#8217;ve just finished the latest functionality of the plugin I wanted to add the project to Travis CI, just like I do with all my other projects (the ones with unit tests).</p>

<!-- more -->


<h2>Grunt</h2>

<p>For the development of the plugin I used <a href="http://gruntjs.com/">Grunt</a> which is a task-based command line build tool for JavaScript projects. Starting a new project is as easy as running <code>grunt init:jquery</code> and you have a entire generated jQuery plugin project.</p>

<p>By default this command configures a jQuery plugin, QUnit test suite, sample plugin, sample tests and some grunt tasks you can use. Running the <code>grunt</code> command in your project folder will execute the default task meaning:</p>

<ol>
<li>lint - Analysis your code with <a href="https://github.com/douglascrockford/JSLint/">JSLint</a></li>
<li>qunit - Runs your QUnit tests using <a href="http://phantomjs.org/">PhantomJS</a> (so it supports the exit code for success or failure)</li>
<li>concat - Concatenate your project files</li>
<li>min - Minify your project files using <a href="https://github.com/mishoo/UglifyJS/">UglifyJS</a></li>
</ol>


<p>Really easy to get started coding instead of setting up your environment :)</p>

<h2>Integration with Travis CI</h2>

<p>Ok so at this point I want to add my project to Travis CI so that it tests my suite when pushing new branches/commits to Github. To do this we have to make a few changes.</p>

<h3>TL;DR</h3>

<p>Here&#8217;s the <a href="https://github.com/manuelvanrijn/jquery-numeric_input/commit/fd770092e569fbc407777de3f099d6d4d5d30bdf">travis ci integration commit</a> from my plugin with all the steps described below.</p>

<h3>Registering the travis task</h3>

<p>I&#8217;d like to keep the Grunt tasks organized so I register a new task called <code>travis</code> below the <code>default</code> task.</p>

<figure class='code'><figcaption><span>grunt.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Default task.</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="s1">&#39;lint qunit concat min&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Travis CI task.</span>
</span><span class='line'><span class="nx">grunt</span><span class="p">.</span><span class="nx">registerTask</span><span class="p">(</span><span class="s1">&#39;travis&#39;</span><span class="p">,</span> <span class="s1">&#39;lint qunit&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see I only added <code>lint</code> and <code>qunit</code> because we don&#8217;t have to concatenate or minify a new build of our plugin. At this point you are able to run <code>grunt travis</code> from the command line.</p>

<h3>Adding the dependency</h3>

<p>Now we have to add Grunt as a dependency to our <code>package.json</code> file so that npm running on Travis CI knows it has to install Grunt. Mine dependencies block looks like this:</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;grunt&quot;</span><span class="p">:</span> <span class="s2">&quot;~0.3.9&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;jquery&quot;</span><span class="p">:</span> <span class="s2">&quot;~1.5&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Adding the npm task</h3>

<p>Travis CI runs <code>npm test</code> after it fetched your project and installed the dependencies, so we need to add this task to the <code>package.json</code> file.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;test&quot;</span><span class="p">:</span> <span class="s2">&quot;grunt travis --verbose&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;ve added the <code>--verbose</code> option, so we&#8217;ll see more output of what is going on.</p>

<h3>Adding the .travis.yml</h3>

<p>Every Travis CI project needs to have a <code>.travis.yml</code> file in the root of the project folder, so it know what platform and version it should use to build/test your project. Here&#8217;s the one I used:</p>

<figure class='code'><figcaption><span>.travis.yaml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">node_js</span>
</span><span class='line'><span class="l-Scalar-Plain">node_js</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">0.6</span>
</span><span class='line'><span class="l-Scalar-Plain">before_script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;export</span><span class="nv"> </span><span class="s">DISPLAY=:99.0&quot;</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="s">&quot;sh</span><span class="nv"> </span><span class="s">-e</span><span class="nv"> </span><span class="s">/etc/init.d/xvfb</span><span class="nv"> </span><span class="s">start&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The commands within <code>before_script</code> takes care of running the PhantomJS on the headless server on Travis CI.</p>

<h2>Ready to go!</h2>

<p>Alright after these changes your project is ready to be continuously builded with Travis CI. But don&#8217;t forget to setup the Service Hook on Github!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taking MemSQL for a spin]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin/"/>
    <updated>2012-06-20T10:18:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin</id>
    <content type="html"><![CDATA[<p><a href="http://manuel.manuelles.nl/blog/2012/06/20/taking-memsql-for-a-spin/"><img class="left" src="http://manuel.manuelles.nl/images/posts/memsql.png" width="200" height="200" title="MemSQL" ></a> This week I read an article on <a href="http://news.ycombinator.com/item?id=4126007">HackerNews</a> about Ex-facebook employs releasing a new database server called MemSQL.</p>

<p>After viewing there <a href="http://developers.memsql.com/">product overview video</a> I got excited and wanted to take this product for a spin.</p>

<!-- more -->


<h2>What to test?</h2>

<p>First I needed a project for testing the performance on. At <a href="http://www.auxilium.nl">my work</a> we developed a Rails application that needs to validate a permit request with rules, questions, filters, answers depending on a region etc. etc. This process of validating a whole permit request takes some time because it has to perform <strong>6850 queries</strong>.</p>

<h2>Performance PostgreSQL</h2>

<p>At this moment the application runs on a PostgreSQL database so lets see what the performance is at this point:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>run       user     system      total        real
</span><span class='line'>#01  10.690000   0.540000  11.230000 ( 14.828312)
</span><span class='line'>#02   9.450000   0.490000   9.940000 ( 13.895988)
</span><span class='line'>#03   9.550000   0.470000  10.020000 ( 14.215028)</span></code></pre></td></tr></table></div></figure>


<p><span class='pullquote-right' data-pullquote='14.312ms for 6850 queries'>
The average result is that it takes 14.312ms for 6850 queries on PostgreSQL.
</span></p>

<h2>Configuring the Rails app to use MemSQL</h2>

<p>After installing MemSQL and starting it running on port 3307, I created a new database added the existing data and changed some connection strings for the Rails app.</p>

<h3>mysql2 gem</h3>

<p>Because MemSQL is built on top of MySQL you can use all the MySQL client tools to perform operations on MemSQL.</p>

<p>The MemSQL documentation recommended using the memsql2 gem but to do this I had to install MySQL first on my machine.</p>

<h3>Failed to connect?</h3>

<p>After installing MySQL and configured the Rails application I got some strange error when starting the application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Failed to connect to database:
</span><span class='line'>  Sequel::AdapterNotFound -&gt; LoadError: dlopen(.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle, 9): Library not loaded: /usr/local/mysql/lib/libmysqlclient.16.dylib
</span><span class='line'>  Referenced from: /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
</span><span class='line'>  Reason: image not found - /Users/mvanrijn/.rbenv/versions/1.9.3-p194/lib/ruby/gems/1.9.1/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle</span></code></pre></td></tr></table></div></figure>


<p>After some googling I found out that on OSX you might need to symlink the dylib manually. <strong>NOTE</strong> Because I&#8217;ve installed a newer version of MySQL I have a <code>libmysqlclient.18.dylib</code> instead of the required <code>libmysqlclient.16.dylib</code>. Symlinking this file from libmysqlclient.18.dylib to libmysqlclient.16.dylib seemed to work for me.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/local/mysql/lib/libmysqlclient.16.dylib</span></code></pre></td></tr></table></div></figure>


<h3>Explain not supported for joins</h3>

<p>At this point I am able to connect to the database and perform the benchmark, but I got the next error:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActiveRecord::StatementInvalid: Mysql2::Error: Feature 'EXPLAIN for join queries' is not supported by MemSQL.</span></code></pre></td></tr></table></div></figure>


<p>Apparently I&#8217;ve EXPLAIN queries on in my config and this isn&#8217;t supported for JOIN queries as MemSQL tells us.</p>

<p>To resolve this you just have to modify/add this line in your <code>config/environment/development.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.active_record.auto_explain_threshold_in_seconds = nil</span></code></pre></td></tr></table></div></figure>


<h2>MemSQL&#8217;s first spin!</h2>

<p><span class='pullquote-right' data-pullquote='first run took 3 min and 05 seconds!'>
So after resolving all these issues I was able to run the benchmark, but the first run took 3 min and 05 seconds! First I thought that this can not be right, but I forgot the fact that it generate&#8217;s c code from the queries.
</span></p>

<p>On the MemSQL server I got the following output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="mi">2908919519</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">20</span> <span class="mi">09</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mi">16</span> <span class="n">INFO</span><span class="p">:</span> <span class="n">Query</span> <span class="n">appdb</span><span class="p">.</span><span class="s1">&#39;SELECT  `permit_requests`.* FROM `permit_requests`  WHERE `permit_requests`.`id` = @ LIMIT @&#39;</span> <span class="n">compiled</span> <span class="k">in</span> <span class="mi">7306</span> <span class="n">milliseconds</span>
</span><span class='line'><span class="mi">2908983637</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">20</span> <span class="mi">09</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mi">16</span> <span class="n">WARNING</span><span class="p">:</span> <span class="n">WARN</span> <span class="n">DISABLED</span> <span class="n">LOCKDOWN</span><span class="p">:</span> <span class="k">BEGIN</span> <span class="n">TRANSACTION</span>
</span><span class='line'><span class="mi">2916240227</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">20</span> <span class="mi">09</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mi">23</span> <span class="n">INFO</span><span class="p">:</span> <span class="n">Query</span> <span class="n">appdb</span><span class="p">.</span><span class="s1">&#39;SELECT  `categories`.* FROM `categories`  WHERE `categories`.`id` = @ ORDER BY name LIMIT @&#39;</span> <span class="n">compiled</span> <span class="k">in</span> <span class="mi">7203</span> <span class="n">milliseconds</span>
</span><span class='line'><span class="mi">2924143142</span> <span class="mi">2012</span><span class="o">-</span><span class="mi">06</span><span class="o">-</span><span class="mi">20</span> <span class="mi">09</span><span class="p">:</span><span class="mi">56</span><span class="p">:</span><span class="mi">31</span> <span class="n">INFO</span><span class="p">:</span> <span class="n">Query</span> <span class="n">appdb</span><span class="p">.</span><span class="s1">&#39;SELECT `questions`.* FROM `questions`  WHERE `questions`.`category_id` = @ ORDER BY position&#39;</span> <span class="n">compiled</span> <span class="k">in</span> <span class="mi">7722</span> <span class="n">milliseconds</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span> <span class="n">etc</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, generating the compiled version for every query took about 7 seconds.</p>

<h2>Performance MemSQL</h2>

<p>So below again the same table with results. The first line is the time with generating all the compiled queries:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">run</span>       <span class="k">user</span>     <span class="k">system</span>      <span class="n">total</span>        <span class="nb">real</span>
</span><span class='line'><span class="o">#</span><span class="mi">01</span>   <span class="mi">5</span><span class="p">.</span><span class="mi">260000</span>   <span class="mi">0</span><span class="p">.</span><span class="mi">360000</span>   <span class="mi">5</span><span class="p">.</span><span class="mi">620000</span> <span class="p">(</span><span class="mi">183</span><span class="p">.</span><span class="mi">511099</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="mi">02</span>   <span class="mi">3</span><span class="p">.</span><span class="mi">830000</span>   <span class="mi">0</span><span class="p">.</span><span class="mi">260000</span>   <span class="mi">4</span><span class="p">.</span><span class="mi">090000</span> <span class="p">(</span>  <span class="mi">6</span><span class="p">.</span><span class="mi">657682</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="mi">03</span>   <span class="mi">3</span><span class="p">.</span><span class="mi">790000</span>   <span class="mi">0</span><span class="p">.</span><span class="mi">260000</span>   <span class="mi">4</span><span class="p">.</span><span class="mi">050000</span> <span class="p">(</span>  <span class="mi">6</span><span class="p">.</span><span class="mi">613542</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><span class='pullquote-right' data-pullquote='6.635ms for 6850 queries'>
The performance boost is quite huge! The average result is 6.635ms for 6850 queries if we are skipping the first result. This means it&#8217;s like 7.677ms faster!
</span></p>

<h3>Cold boot of MemSQL</h3>

<p>I&#8217;ve also tried the performance when I restart the database server. I just wanted to know if it keeps the data in memory and would take longer to run after a restart.</p>

<p>The result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">run</span>       <span class="k">user</span>     <span class="k">system</span>      <span class="n">total</span>        <span class="nb">real</span>
</span><span class='line'><span class="o">#</span><span class="mi">01</span>   <span class="mi">5</span><span class="p">.</span><span class="mi">110000</span>   <span class="mi">0</span><span class="p">.</span><span class="mi">330000</span>   <span class="mi">5</span><span class="p">.</span><span class="mi">440000</span> <span class="p">(</span>  <span class="mi">8</span><span class="p">.</span><span class="mi">030930</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="mi">02</span>   <span class="mi">3</span><span class="p">.</span><span class="mi">770000</span>   <span class="mi">0</span><span class="p">.</span><span class="mi">260000</span>   <span class="mi">4</span><span class="p">.</span><span class="mi">030000</span> <span class="p">(</span>  <span class="mi">6</span><span class="p">.</span><span class="mi">580312</span><span class="p">)</span>
</span><span class='line'><span class="o">#</span><span class="mi">03</span>   <span class="mi">3</span><span class="p">.</span><span class="mi">780000</span>   <span class="mi">0</span><span class="p">.</span><span class="mi">250000</span>   <span class="mi">4</span><span class="p">.</span><span class="mi">030000</span> <span class="p">(</span>  <span class="mi">6</span><span class="p">.</span><span class="mi">524884</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><span class='pullquote-right' data-pullquote='7.044ms for 6850 queries'>
The first time it took just a bit longer, but with an average of 7.044ms for 6850 queries this is still faster than running it on PostgreSQL!
</span></p>

<h2>Pros and Cons</h2>

<p>Here&#8217;s a list with some pros and cons I noticed while experimenting with MemSQL:</p>

<h3>Pros</h3>

<ul>
<li>Blazing fast!</li>
<li>You can use all the MySQL client tools out there. Also because it uses MySQL, troubleshooting might not be an issue because it isn&#8217;t a new product.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Huge cache folder! After restoring the database (15Mb) MemSQL creates a folder in the <code>plancache</code> folder which is <strong>5.5GB</strong>. So performance comes with a price I think.</li>
<li>Unable to create users. When creating the database, I tried to add a new user but this isn&#8217;t supported. Maybe this is because I&#8217;m using the Developer Edition.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Android SKD for Eclipse]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/04/04/installing-android-skd-for-eclipse/"/>
    <updated>2012-04-04T09:53:00+02:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/04/04/installing-android-skd-for-eclipse</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://manuel.manuelles.nl/images/posts/android.jpg" width="140" height="140" title="Android!" > Today I was trying to install the Android SDK for Eclipse for a new project I&#8217;ll work on. After downloading the necessary packages I got some strange error I couldn&#8217;t resolve quickly, so I like to share the solution with you guys.</p>

<p>The error Eclipse returned was</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Cannot complete the install because one or more required items could not be found.
</span><span class='line'>Software being installed: Android Development Tools **** (com.android.ide.eclipse.adt.feature.group ****)
</span><span class='line'>Missing requirement: Android Development Tools **** (com.android.ide.eclipse.adt.feature.group ****)
</span><span class='line'>requires 'org.eclipse.wst.sse.core 0.0.0' but it could not be found</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>What I did to produce the error</h2>

<p>I installed Eclipse and the Android SDK tested the Android SDK by creating an AVD.</p>

<p>After running Eclipse I tried to add the <code>https://dl-ssl.google.com/android/eclipse/</code> url to my Available Software Sites to install the Eclipse package. After selecting all the Developer Tools in the filtered list for this Software Site and hitting Next I received the error as I added above</p>

<h2>The solution</h2>

<p>After some googling I found a tip that I needed to add another Software Site to Eclipse.</p>

<p>After adding <code>http://download.eclipse.org/releases/indigo</code> and retrying to install the Android Developer Tools all went well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Failed to build gem native extension]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/03/20/failed-to-build-gem-native-extension/"/>
    <updated>2012-03-20T13:14:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/03/20/failed-to-build-gem-native-extension</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://manuel.manuelles.nl/images/posts/failed-gem.jpg" width="140" height="140" title="Go fix!" >
Today I had to reinstall my Linux installation because my harddisk died a quick dead. While configuring all the software I use to develop I got some weird error after I&#8217;d installed <a href="https://github.com/sstephenson/rbenv">rbenv</a> and tried to execute <code>bundle install</code> on one of our projects.<br /><br /></p>

<!-- more -->


<h2>The error</h2>

<p>The following error was raised when I tried to install capybara-webkit</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Installing capybara-webkit (0.10.1) with native extensions
</span><span class='line'>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
</span><span class='line'>
</span><span class='line'>/home/manuel/.rbenv/versions/1.9.3-p125/bin/ruby extconf.rb
</span><span class='line'>sh: qmake: not found
</span><span class='line'>
</span><span class='line'>Gem files will remain installed in /home/manuel/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/capybara-webkit-0.10.1 for inspection.
</span><span class='line'>Results logged to /home/manuel/.rbenv/versions/1.9.3-p125/lib/ruby/gems/1.9.1/gems/capybara-webkit-0.10.1/./gem_make.out
</span><span class='line'>An error occured while installing capybara-webkit (0.10.1), and Bundler cannot continue.
</span><span class='line'>Make sure that `gem install capybara-webkit -v '0.10.1'` succeeds before bundling.</span></code></pre></td></tr></table></div></figure>


<h2>The solution</h2>

<p>I first thought there were some problems with <code>make</code> or <code>cmake</code> because that&#8217;s what the error says. <code>qmake: not found</code>, but that didn&#8217;t seem to be te real problem.</p>

<p>After some googlefoo I found out that I was missing the <code>libqtwebkit-dev</code> package. So the problem in this case was easily resolved by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install libqtwebkit-dev</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mollie Bank]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/02/29/mollie-bank/"/>
    <updated>2012-02-29T21:29:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/02/29/mollie-bank</id>
    <content type="html"><![CDATA[<p>The past week I&#8217;ve been working with the iDeal API from Mollie. <a href="http://www.mollie.nl/">Mollie</a> is a company that give&#8217;s us developers an easy way to make iDeal payments through there API, for a small fee.</p>

<p>After a long search I wasn&#8217;t able to find a stable, well tested gem, I could use in our Rails project, so I developed the <a href="https://rubygems.org/gems/ideal-mollie">ideal-mollie gem</a>. After I finishing this gem, there was only one problem.</p>

<p>When you want to test a iDeal transaction with the Mollie test bank, you <strong>MUST</strong> do some routing, so that Mollie can send you a request if the payment was paid or not, to your local machine from the internet. So I made a alternative Mollie test bank you can use for what ever programming language you use for making Mollie iDeal payments without the routing problems.</p>

<!-- more -->


<h2>There&#8217;s a gem for that!</h2>

<p>I&#8217;ve came op with a gem that runs a small <a href="http://www.sinatrarb.com/">Sinatra</a> application that does exactly the same as the Mollie test bank, only it runs on your local machine, which means you can redirect to <code>localhost</code> and more important, it can perform the payment check.</p>

<p>Here you can find the <a href="https://rubygems.org/gems/mollie-bank">mollie-bank gem</a>, and the <a href="https://github.com/manuelvanrijn/mollie-bank">source code</a></p>

<p><img src="http://manuel.manuelles.nl/images/posts/mollie-bank.png"></p>

<h2>Install en run!</h2>

<p>To use mollie-bank just install the gem by running</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install mollie-bank</span></code></pre></td></tr></table></div></figure>


<p>and then run it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mollie-bank</span></code></pre></td></tr></table></div></figure>


<p>At this point, you can go to <a href="http://localhost:4567/">http://localhost:4567/</a> and you&#8217;ll see an intro page.</p>

<h2>Setup your application</h2>

<p>Alright so now you only have to make sure that when you&#8217;re developing on your local machine, you don&#8217;t make the requests to Mollie but to your locally running Mollie Bank.</p>

<p>To do this you just have to change <code>https://secure.mollie.nl</code> into <code>http://localhost:4567</code> in you code.</p>

<h2>Todo</h2>

<p>At this point I&#8217;ve only wrote a sample implementation for <a href="http://rubyonrails.org/" title="Ruby on Rails">Ruby on Rails</a> on the <a href="https://github.com/manuelvanrijn/mollie-bank/wiki/Implement-into-existing-modules">Implement into existing modules Wiki</a> page, but soon there will be more examples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[“Rake, pull me that DB!”]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/01/19/rake-pull-me-that-db/"/>
    <updated>2012-01-19T15:15:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/01/19/rake-pull-me-that-db</id>
    <content type="html"><![CDATA[<p>After writing my last article how to <a href="http://manuel.manuelles.nl/blog/2012/01/18/convert-postgresql-to-sqlite/" title="How to: Convert a PostgreSQL database to a SQLite database">Convert PostgreSQL to SQLite</a>, I was asked why this couldn&#8217;t be automated?</p>

<p>So I started coding and managed to create a <a href="http://rake.rubyforge.org/" title="Rake -- Ruby Make">Rake</a> task that will do all of the steps I described in the article in just a few seconds!</p>

<!-- more -->


<h2>Update</h2>

<p>Today a found a project that does exactly the samething as the below rake task, but with support for more db providers. <a href="http://www.herko.com">Heroku</a> uses this project for retrieving and pushing you database to the heroku database server.</p>

<p>The project is called Taps and can be found here: <a href="http://adam.heroku.com/past/2009/2/11/taps_for_easy_database_transfers/">http://adam.heroku.com/past/2009/2/11/taps_for_easy_database_transfers</a></p>

<h2>What will it do?</h2>

<ol>
<li>remove old dump and ssh the new dump to <code>tmp/dump.sql</code></li>
<li>converts the dumped SQL in to a valid format for SQLite</li>
<li>remembers the version number of the migration on the production db</li>
<li>backup, create and migrates the development SQLite to the version remembered</li>
<li>import the SQL</li>
<li>tell you all went well</li>
</ol>


<h2>Configuration</h2>

<p>To use the Rake task, you have to add 2 additional fields (<code>ssh_user</code> and <code>ssh_host</code>) to your <code>database.yml</code> file. These fields are used to create an ssh connection for retrieving the PostgreSQL dump.</p>

<p>Here&#8217;s example of a modified <code>config/database.yml</code>:</p>

<div><script src='https://gist.github.com/1640429.js?file=database.yml'></script>
<noscript><pre><code>development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

production:
  ssh_user: root                  # &lt;-- add username for ssh
  ssh_host: productionserver.com  # &lt;-- add hostname for ssh
  adapter: postgresql
  host: localhost
  port: 5432
  username: db_user
  password: db_pass
  database: db_name
  schema_search_path: public
  encoding: utf8
  template: template0</code></pre></noscript></div>


<h2>Get the Rake file</h2>

<p>Put the following code into <code>libs/tasks/database.rake</code></p>

<div><script src='https://gist.github.com/1640429.js?file=database.rake'></script>
<noscript><pre><code>require 'fileutils'

namespace :db do
  desc 'pull the production PostgreSQL database into the development SQLite'
  task :pull do
    Rake::Task['db:download_pg_dump'].invoke
    Rake::Task['db:optimze_pg_dump_for_sqlite'].invoke
    Rake::Task['db:recreate_with_dump'].invoke
  end

  desc 'download the pg_dump content into tmp/dump.sql'
  task :download_pg_dump do
    config = Rails.application.config.database_configuration

    abort &quot;Missing production database config&quot; if config['production'].blank?

    dev  = config['development']
    prod = config['production']

    abort &quot;Development db is not sqlite3&quot; unless dev['adapter'] =~ /sqlite3/
    abort &quot;Production db is not postgresql&quot; unless prod['adapter'] =~ /postgresql/
    abort &quot;Missing ssh host&quot; if prod['ssh_host'].blank?
    abort &quot;Missing database name&quot; if prod['database'].blank?

    # remove the old one
    if File.exists?(pg_dump_file_path)
      File.delete(pg_dump_file_path)
    end

    cmd  = &quot;ssh -C &quot;
    cmd &lt;&lt; &quot;#{prod['ssh_user']}@&quot; if prod['ssh_user'].present?
    cmd &lt;&lt; &quot;#{prod['ssh_host']} &quot;
    cmd &lt;&lt; &quot;PGPASSWORD=#{prod['password']} &quot;
    cmd &lt;&lt; &quot;pg_dump --data-only --inserts &quot;
    cmd &lt;&lt; &quot;--username=#{prod['username']} #{prod['database']} &gt; &quot;
    cmd &lt;&lt; pg_dump_file_path

    system `#{cmd}`
  end

  desc 'remove unused statements and optimze sql for SQLite'
  task :optimze_pg_dump_for_sqlite do
    result = []
    lines = File.readlines(pg_dump_file_path)
    @version = 0
    lines.each do | line |
      next if line =~ /SELECT pg_catalog.setval/  # sequence value's
      next if line =~ /SET /                      # postgres specific config
      next if line =~ /--/                        # comment

      if line =~ /INSERT INTO schema_migrations/
        @version = line.match(/INSERT INTO schema_migrations VALUES \('([\d]*)/)[1]
      end

      # replace true and false for 't' and 'f'
      line.gsub!(&quot;true&quot;,&quot;'t'&quot;)
      line.gsub!(&quot;false&quot;,&quot;'f'&quot;)
      result &lt;&lt; line
    end

    File.open(pg_dump_file_path, &quot;w&quot;) do |f|
      # Add BEGIN and END so we add it to 1 transaction. Increase speed!
      f.puts(&quot;BEGIN;&quot;)
      result.each{|line| f.puts(line) unless line.blank?}
      f.puts(&quot;END;&quot;)
    end
  end

  desc 'backup development.sqlite3 and create a new one with the dumped data'
  task :recreate_with_dump do
    # sqlite so backup
    database = Rails.configuration.database_configuration['development']['database']
    database_path = File.expand_path(&quot;#{Rails.root}/#{database}&quot;)
    # remove old backup
    if File.exists?(database_path + '.backup')
      File.delete(database_path + '.backup')
    end
    # copy current for backup
    FileUtils.cp database_path, database_path + '.backup' if File.exists?(database_path)

    # dropping and re-creating db
    ENV['VERSION'] = @version
    Rake::Task['db:drop'].invoke
    Rake::Task[&quot;db:migrate&quot;].invoke

    puts &quot;migrated to version: #{@version}&quot;
    puts &quot;importing...&quot;
    # remove migration info
    system `sqlite3 #{database_path} &quot;delete from schema_migrations;&quot;`
    # import dump.sql
    system `sqlite3 #{database_path} &quot;.read #{pg_dump_file_path}&quot;`

    puts &quot;DONE!&quot;
    puts &quot;NOTE: you're now migrated to version #{@version}. Please run db:migrate to apply newer migrations&quot;
  end

  def pg_dump_file_path
    File.expand_path(&quot;#{Rails.root}/tmp/dump.sql&quot;)
  end
end</code></pre></noscript></div>


<h2>Usage</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake db:pull</span></code></pre></td></tr></table></div></figure>


<h3>No SSH?</h3>

<p>If you want to skip the step where the rake tasks get&#8217;s the dump using ssh, you have to copy the dump.sql into the tmp folder by yourself (note that the name <strong>must</strong> be <code>dump.sql</code>)</p>

<p>After you copied it, you should execute the following commands, to generate the development database with the dumped sql.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec rake db:optimze_pg_dump_for_sqlite
</span><span class='line'>bundle exec rake db:recreate_with_dump</span></code></pre></td></tr></table></div></figure>


<h3>Want to skip entering the ssh password every time?</h3>

<p>You could generate a public/private key pair with RSA and append that key to the production server so you don&#8217;t have to enter the password over and over again to connect with ssh.</p>

<h4>1. Generate a public/private key pair with RSA</h4>

<p>First check if you haven&#8217;t already generated a <code>id_rsa</code> file in your <code>$HOME/.shh</code> folder. If you already have a <code>id_rsa</code> file continue with step 2.</p>

<p>Run the following command on you local machine and accept the defaults.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa</span></code></pre></td></tr></table></div></figure>


<p>This command creates an RSA public/private key pair in your <code>$HOME/.ssh</code> directory. The private key is <code>~/.ssh/id_rsa</code> and the public key is <code>~/.ssh/id_rsa.pub</code></p>

<h4>2. Install public key on remote machine</h4>

<p>Now you can copy the public key to the remote machine by executing the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-copy-id -i root@productionserver.com</span></code></pre></td></tr></table></div></figure>


<p>This command will ask you to enter the ssh password for the ssh user &#8220;root&#8221; for the hostname &#8220;productionserver.com&#8221;.</p>

<p>After you&#8217;ve enter the password (for the last time) you can create a ssh connection without entering the password by executing:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@productionserver.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert PostgreSQL to SQLite]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/01/18/convert-postgresql-to-sqlite/"/>
    <updated>2012-01-18T00:30:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/01/18/convert-postgresql-to-sqlite</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://manuel.manuelles.nl/images/posts/postgres-to-sqlite.png" width="220" height="220" title="Postgres to SQLite" ></p>

<p>Today I&#8217;d like to share the steps I take when I need to convert a <a href="http://www.postgresql.org/" title="PostgreSQL">PostgreSQL</a> database into a <a href="http://www.sqlite.org/" title="SQLite">SQLite</a> database.</p>

<p>Commonly I have to do this when a <a href="http://rubyonrails.org/" title="Ruby on Rails">Ruby on Rails</a> application is in production and I have to check some issues with the production data. In the production environment we usually use a PostgreSQL database and for developing I use a SQLite database, so we need some conversion.</p>

<!-- more -->


<h2>Short story a.k.a I know what I&#8217;m doing.</h2>

<ol>
<li>Create a dump of the PostgreSQL database.
<code>ssh -C username@hostname.com pg_dump --data-only --inserts YOUR_DB_NAME &gt; dump.sql</code></li>
<li>Remove/modify the dump.

<ul>
<li>Remove the lines starting with <code>SET</code></li>
<li>Remove the lines starting with <code>SELECT pg_catalog.setval</code></li>
<li>Replace true for &#8216;t&#8217;</li>
<li>Replace false for &#8216;f&#8217;</li>
<li>Add <code>BEGIN;</code> as first line and <code>END;</code> as last line</li>
</ul>
</li>
<li>Recreate an empty development database.
<code>bundle exec rake db:migrate</code></li>
<li>Import the dump.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sqlite3 db/development.sqlite3
</span><span class='line'>sqlite&gt; delete from schema_migrations;
</span><span class='line'>sqlite&gt; .read dump.sql
</span></code></pre></td></tr></table></div></figure>


<h2>Longer story a.k.a please explain a little more.</h2>

<p>So basically you can do the following 4 major steps to convert the PostgreSQL database into a SQLite database.</p>

<h3>1. Generate a SQL dump</h3>

<p>First we have to create a sql dump on the production server. I use the following command that results in a <code>dump.sql</code> file in the current folder:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pg_dump --data-only --inserts YOUR_DB_NAME &gt; dump.sql
</span></code></pre></td></tr></table></div></figure>


<p>I use the <code>--data-only</code> option, so it doesn&#8217;t generate the schema. Converting the pg_dump generate schema to a valid SQLite schema gave me a lot of difficulties so I chose to generate the schema with the <code>rake db</code> task (we&#8217;ll discuss this in the next step).</p>

<p>After you created the dump, you have to download/transfer/mail/etc. that file so you have local access to it.</p>

<h4>Trick: Got ssh access?</h4>

<p>If you have ssh access, you can also run the following command, which will output the file directly on you local drive</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -C username@hostname.com pg_dump --data-only --inserts YOUR_DB_NAME &gt; dump.sql
</span></code></pre></td></tr></table></div></figure>


<h3>2. Modify the dump.sql</h3>

<p>There are a few manual find/replace and delete action&#8217;s you have to perform on the <code>dump.sql</code> file by hand.</p>

<h4>2.1 Remove the <code>SET</code> statements at the top</h4>

<p>You will see some statements at the top of the file like <code>SET statement_timeout = 0;</code> and <code>SET client_encoding = 'SQL_ASCII';</code> etc. Remove all of these lines that start with <code>SET</code>, because SQLite doesn&#8217;t use these.</p>

<h4>2.2 Remove the setval sequence queries</h4>

<p>Under the <code>SET</code> queries you&#8217;ll see some queries to set the correct sequence for auto incrementing the id&#8217;s. SQLite doesn&#8217;t keep these value&#8217;s in a catalog and must be removed to prevent errors.</p>

<p>Remove all the line&#8217;s that look like <code>SELECT pg_catalog.setval('MY_OBJECT_id_seq', 10, true);</code></p>

<h4>2.3 Replace true => &#8216;t&#8217; and false => &#8216;f&#8217;</h4>

<p>The <code>pg_dump</code> generate&#8217;s <code>true</code> and <code>false</code> as value&#8217;s for the <code>INSERT INTO</code> statements. If we want to import these to SQLite we have to replace these to &#8216;t&#8217; and &#8216;f&#8217;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- These:</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">table_name</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'><span class="c1">-- Should be replace to:</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">table_name</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;t&#39;</span><span class="p">,</span> <span class="s1">&#39;f&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2.4 Transactions. Make it fast!</h4>

<p>The first time I imported the dump (that was 2 mb) it took like 12 minutes to complete! After some googling I found out that SQLite&#8217;s default behavior is putting each statement into a transaction, which seems to be the time waster (after the fix it toke 12 seconds).</p>

<p>To prevent this behavior you can run the script within 1 transaction by specifying <code>BEGIN;</code> at the top of the <code>dump.sql</code> and <code>END;</code> at the end of the file.</p>

<p>So you would have:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">BEGIN</span><span class="p">;</span>
</span><span class='line'><span class="c1">-- a lot of INSERT INTO statments</span>
</span><span class='line'><span class="k">END</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. Recreate the development database</h3>

<p>So now we have fetched the production data from the PostgreSQL database, we need to recreate the <code>development.sqlite3</code> database.</p>

<p>Make a backup and run the migration task</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv db/development.sqlite3 db/development.backup.sqlite3
</span><span class='line'>bundle <span class="nb">exec </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>


<h4>Side note when migrating</h4>

<p>You must run the migration <strong>until</strong> the migrated version that is active on the production database. If not, you could have the situation where you have dropped a column and can&#8217;t import the dump because the data depends on that column.</p>

<p>Check the <code>dump.sql</code> for the latest version number in the <code>schema_migrations</code> table and migrate to that version.</p>

<p>For example for the version <code>20121701120000</code> you would do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rake db:migrate <span class="nv">VERSION</span><span class="o">=</span>20121701120000
</span></code></pre></td></tr></table></div></figure>


<h3>4. Import the dump</h3>

<p>The final step is importing the dump file. To do this we have to execute the following command within a terminal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sqlite3 db/development.sqlite3
</span><span class='line'>sqlite&gt; delete from schema_migrations;
</span><span class='line'>sqlite&gt; .read dump.sql
</span></code></pre></td></tr></table></div></figure>


<p>As you can see we first remove the records from the <code>schema_migrations</code> table, because these are also included in the <code>dump.sql</code>. Of course you could also remove the lines from the file, but I prefer this way.</p>

<p>The <code>.read</code> command just execute&#8217;s all the lines within the specified file.</p>

<h2>Result</h2>

<p>And that&#8217;s it! You now have a stuffed <code>development.sqlite3</code> database with all the production data out of the PostgreSQL database.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disable Rails callback]]></title>
    <link href="http://manuel.manuelles.nl/blog/2012/01/12/disable-rails-before-slash-after-callback/"/>
    <updated>2012-01-12T21:30:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2012/01/12/disable-rails-before-slash-after-callback</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://manuel.manuelles.nl/images/posts/skip-step.png" width="240" height="240" title="Skip Step" ></p>

<p>Today I&#8217;ve had some difficulties with a Rails migration, that took ages to complete. After some debugging I figured out that the issues was because of the <code>before_save</code> and <code>after_save</code> callbacks.</p>

<p>Of course we could remove the before and after save callbacks to speed up the process, but I don&#8217;t like the idea of releasing a model that misses these behavior. I mean they&#8217;re not there for no reason right?</p>

<!-- more -->


<p>After some googling I found a quick and easy way to disable the callbacks without modifying the model. Here&#8217;s an simple example of a model class and a migration the disable the callbacks only within the migration.</p>

<h2>Code solution</h2>

<figure class='code'><figcaption><span>app/models/some_model.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SomeModel</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_save</span> <span class="ss">:before_action</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="ss">:after_action</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">before_action</span>
</span><span class='line'>      <span class="c1"># heavy calculation/queries</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;you shouldn&#39;t see this&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">after_action</span>
</span><span class='line'>      <span class="c1"># another heavy calculation/queries</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;you shouldn&#39;t see this&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>db/migrations/20120112092136_update_some_model.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UpdateSomeModel</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">up</span>
</span><span class='line'>    <span class="c1"># disable the before_save</span>
</span><span class='line'>    <span class="no">SomeModel</span><span class="o">.</span><span class="n">skip_callback</span><span class="p">(</span><span class="ss">:save</span><span class="p">,</span> <span class="ss">:before</span><span class="p">,</span> <span class="ss">:before_action</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># disable the after_save</span>
</span><span class='line'>    <span class="no">SomeModel</span><span class="o">.</span><span class="n">skip_callback</span><span class="p">(</span><span class="ss">:save</span><span class="p">,</span> <span class="ss">:after</span><span class="p">,</span> <span class="ss">:after_action</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">SomeModel</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">obj</span> <span class="o">|</span>
</span><span class='line'>      <span class="c1"># .. modify obj ...</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">obj</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="c1"># you shouldn&#39;t see the puts defined in the SomeModel before and after actions</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">down</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Supported callbacks</h2>

<p>In the above example I show only two rails callbacks. Here&#8217;s a list of the supported callbacks you also can disable with it.</p>

<ul>
<li><code>:after_initialize</code></li>
<li><code>:after_find</code></li>
<li><code>:after_touch</code></li>
<li><code>:before_validation</code></li>
<li><code>:after_validation</code></li>
<li><code>:before_save</code></li>
<li><code>:around_save</code></li>
<li><code>:after_save</code></li>
<li><code>:before_create</code></li>
<li><code>:around_create</code></li>
<li><code>:after_create</code></li>
<li><code>:before_update</code></li>
<li><code>:around_update</code></li>
<li><code>:after_update</code></li>
<li><code>:before_destroy</code></li>
<li><code>:around_destroy</code></li>
<li><code>:after_destroy</code></li>
<li><code>:after_commit</code></li>
<li><code>:after_rollback</code></li>
</ul>


<p>Hope these could help you out some day =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shrinking your Git repository]]></title>
    <link href="http://manuel.manuelles.nl/blog/2011/12/22/shrinking-your-git-repository/"/>
    <updated>2011-12-22T15:01:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2011/12/22/shrinking-your-git-repository</id>
    <content type="html"><![CDATA[<p>In the past weeks I&#8217;ve looked into a problem that kept us from releasing to <a href="http://www.heroku.com/" title="Heroku">Heroku</a>, because the git repository was to large. In time the repository has grown to approximate <strong>180 Mb</strong>.</p>

<p><img class="right" src="http://manuel.manuelles.nl/images/posts/shrink-mario.jpg" width="140" height="140" title="Shrink!" ></p>

<p>In the past we&#8217;ve made some decisions that we probably wouldn&#8217;t take again. We for example, we decided to store the gem files in the vendor folder and having the rails code included in our repository. Our goal then was, that releasing the project with <a href="http://www.capify.org" title="Capistrano">Capistrano</a> would be easier and faster, because it didn&#8217;t have to download all the gem&#8217;s.</p>

<p>Anyway at this point we don&#8217;t have the gem&#8217;s stored anymore in the vendor folder. Since tools like <a href="http://beginrescueend.com/" title="Ruby version Manager">RVM</a> and <a href="https://github.com/sstephenson/rbenv/" title="rbenv">rbenv</a> we store these within the ruby/rails version of that specific project.</p>

<p>Still we have the problem that the repository contains files etc. we want to remove to shrink the size of it.</p>

<!-- more -->


<h2>Find large files from your git history</h2>

<p>First we have to track down what files are making our repository so large. I&#8217;ve found a perl script that scans your repository for files of a specific size. Here&#8217;s the code:</p>

<div><script src='https://gist.github.com/1354502.js?file='></script>
<noscript><pre><code>#!/usr/bin/perl
use 5.008;
use strict;
use Memoize;

# usage:
# git-large-files 500k
# git-large-files 0.5m
# git-large-files 5b

sub usage { die &quot;usage: git-large-files &lt;size[b|k|m]&gt; [&lt;git-log arguments ...&gt;]\n&quot; }

@ARGV or usage();
my ( $max_size, $unit ) = ( shift =~ /^(\d+)([bkm]?)\z/ ) ? ( $1, $2 ) : usage();

my $exp = 10 * ( $unit eq 'b' ? 0 : $unit eq 'k' ? 1 : 2 );
my $cutoff = $max_size * 2**$exp;

sub walk_tree {
    my ( $tree, @path ) = @_;
    my @subtree;
    my @r;

    {
        open my $ls_tree, '-|', git =&gt; 'ls-tree' =&gt; -l =&gt; $tree
            or die &quot;Couldn't open pipe to git-ls-tree: $!\n&quot;;

        while ( &lt;$ls_tree&gt; ) {
            my ( $type, $sha1, $size, $name ) = /\A[0-7]{6} (\S+) (\S+) +(\S+)\t(.*)/;
            if ( $type eq 'tree' ) {
                push @subtree, [ $sha1, $name ];
            }
            elsif ( $type eq 'blob' and $size &gt;= $cutoff ) {
                push @r, [ $size, @path, $name ];
            }
        }
    }

    push @r, walk_tree( $_-&gt;[0], @path, $_-&gt;[1] )
        for @subtree;

    return @r;
}

memoize 'walk_tree';

open my $log, '-|', git =&gt; log =&gt; @ARGV, '--pretty=format:%T %h %cr'
    or die &quot;Couldn't open pipe to git-log: $!\n&quot;;

my %seen;
while ( &lt;$log&gt; ) {
    chomp;
    my ( $tree, $commit, $age ) = split &quot; &quot;, $_, 3;
    my $is_header_printed;
    for ( walk_tree( $tree ) ) {
        my ( $size, @path ) = @$_;
        my $path = join '/', @path;
        next if $seen{ $path }++;
        print &quot;$commit $age\n&quot; if not $is_header_printed++;
        print &quot;\t$size\t$path\n&quot;;
    }
}</code></pre></noscript></div>


<p>So I&#8217;ve placed this file within my repository and executed the below command to see all files, from all commits, that are bigger then <strong>500 Kb</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>perl git-large-files.pl 500k</span></code></pre></td></tr></table></div></figure>


<p>This give&#8217;s you an output like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>9794784 6 weeks ago
</span><span class='line'>  609280  vendor/cache/builder-3.0.0.gem
</span><span class='line'>  823808  vendor/cache/ffi-1.0.9.gem
</span><span class='line'>  801792  vendor/cache/gherkin-2.4.21.gem
</span><span class='line'>.... more ....
</span><span class='line'>874451c 3 months ago
</span><span class='line'>  609280  vendor/bundle/ruby/1.9.1/cache/builder-3.0.0.gem
</span><span class='line'>  823808  vendor/bundle/ruby/1.9.1/cache/ffi-1.0.9.gem
</span><span class='line'>  801792  vendor/bundle/ruby/1.9.1/cache/gherkin-2.4.21.gem
</span><span class='line'>.... more ....
</span><span class='line'>47ebdca 1 year, 1 month ago
</span><span class='line'>  15467626  vendor/gems/webrat-0.7.1/vendor/selenium-server.jar
</span><span class='line'>  6185324 vendor/rails/activerecord/examples/performance.sql
</span><span class='line'>  14465482  log/development.log</span></code></pre></td></tr></table></div></figure>


<p>As you can see the following folders contain data that we don&#8217;t need anymore and fills our repository with unused data:</p>

<ol>
<li>vendor/cache/*</li>
<li>vendor/bundle/*</li>
<li>vendor/rails/*</li>
<li>log/development.log</li>
</ol>


<h2>Removing the files from git</h2>

<p>To remove the folders specified above I used the commands specified by the <a href="http://help.github.com/remove-sensitive-data/" title="GitHub Help: Remove sensitive data">Remove sensitive data</a> post from GitHub Help</p>

<p>The only thing I changed was adding <code>-rf</code> to the <code>git rm</code> command to recursively force remove the files because I am dealing with multiple files/folders within the target folder.</p>

<h3>Rewrite history</h3>

<p>The final command I used was:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git filter-branch -f --index-filter 'git rm -rf --cached --ignore-unmatch vendor/cache/* vendor/bundle/* vendor/rails/* log/development.log' --prune-empty -- --all</span></code></pre></td></tr></table></div></figure>


<p>Mind the <code>vendor/cache/* vendor/bundle/* vendor/rails/* log/development.log</code> part. You can provide multiple path&#8217;s</p>

<p>When the command is finished, the history has been rewritten, but still the size of the repository hasn&#8217;t changed at this point.</p>

<h3>Cleanup and reclaim space</h3>

<p>You have to execute the following commands to also remove the files from you local repository.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rm -rf .git/refs/original/
</span><span class='line'>git reflog expire --expire=now --all
</span><span class='line'>git gc --aggressive --prune=now</span></code></pre></td></tr></table></div></figure>


<p>Now we can force push our repository so that others can enjoy our effort.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin master --force</span></code></pre></td></tr></table></div></figure>


<h2>The result (98,55% smaller)</h2>

<p>After following the above steps our repository was shrinked by <strong>98,55 %!</strong>. First the repository was 180 Mb and now it is <strong>2.6 Mb</strong></p>

<p>Ofcourse we had this numbers because there were alot of gem files within our repository that were updated frequently and pushed over and over again to the master branch.</p>

<p>I hope this post will help other&#8217;s to track large files within there git repository and how they can remove them to shrink the size of there repostiories.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intro: Start blogging like a hacker(?)]]></title>
    <link href="http://manuel.manuelles.nl/blog/2011/12/08/intro-start-blogging-like-a-hacker/"/>
    <updated>2011-12-08T15:28:00+01:00</updated>
    <id>http://manuel.manuelles.nl/blog/2011/12/08/intro-start-blogging-like-a-hacker</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just decided to switch from <a href="http://www.wordpress.com/" title="Wordpress">Wordpress</a> to <a href="http://octopress.org/" title="Octopress">Octopress</a> because I wanted something new and not something over-featured</p>

<p>All the plugins and choice&#8217;s I had to made, and the maintenance of all these, just kept me from doing what I supposed to do with it, blogging.</p>

<p><span class='pullquote-right' data-pullquote='A blogging framework for hackers.'>
So after some googling what a good alternative would be for Wordpress I found <em>Octopress</em> A blogging framework for hackers. Alright +1 for the title
</span></p>

<p>So basically Octopress generates (bakes) HTML content from the <a href="http://daringfireball.net/projects/markdown/" title="Markdown">Markdown</a> content you write. I like this simplicity and I love the syntax.</p>

<p><a href="http://octopress.org/" title="Octopress">Octopress</a> give&#8217;s you the functionality to host it on your own server, but also to host it on <a href="http://www.heroku.com/" title="Heroku">Heroku</a> or <a href="https://github.com/" title="Github">Github</a>. Beside the Git approach (push your source and deploy the generated code to the master branch) you can use RSync to sync files to your server. I use <a href="https://github.com" title="Github">Github</a> to store my source and generated html.</p>

<p>Enough talking about <a href="http://octopress.org/" title="Octopress">Octopress</a> for now. I&#8217;ll hope to post my next post soon.</p>
]]></content>
  </entry>
  
</feed>
